(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{381:function(a,v,r){"use strict";r.r(v);var t=r(42),e=Object(t.a)({},(function(){var a=this,v=a.$createElement,r=a._self._c||v;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"spring概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring概述"}},[a._v("#")]),a._v(" Spring概述")]),a._v(" "),r("p",[a._v("spring发展过程")]),a._v(" "),r("ul",[r("li",[a._v("第一阶段：xml配置 spring 1.x时代-xml配置bean")]),a._v(" "),r("li",[a._v("第二阶段：注解配置 spring 2.x bean注解（@Component @Service等）-基本数据库等配置用xml，业务配置用注解")]),a._v(" "),r("li",[a._v("第三阶段：java配置 spring 3.x 提供了java配置能力。spring 4.x和springboot推荐使用java配置。")])]),a._v(" "),r("h2",{attrs:{id:"安装jar到本地maven库命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装jar到本地maven库命令"}},[a._v("#")]),a._v(" 安装jar到本地maven库命令")]),a._v(" "),r("p",[a._v('mvn install:install-file -DgroupId=com.oracle "-DartifactId=ojdbc14" "-Dversion=10.2.0.2.0" "-Dpackaging=jar" "-Dfile=D:\\ojdbc14.jar"')]),a._v(" "),r("h2",{attrs:{id:"spring框架四大原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring框架四大原则"}},[a._v("#")]),a._v(" Spring框架四大原则")]),a._v(" "),r("ul",[r("li",[a._v("1.使用pojo进行轻量级和最小侵入式开发")]),a._v(" "),r("li",[a._v("2.通过依赖注入和基于接口编程实现松耦合")]),a._v(" "),r("li",[a._v("3.通过aop和默认习惯进行声明式编程")]),a._v(" "),r("li",[a._v("4.使用aop和模板减少模式化代码")])]),a._v(" "),r("h2",{attrs:{id:"ioc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ioc"}},[a._v("#")]),a._v(" IOC")]),a._v(" "),r("p",[a._v("Spring IOC容器（applicationContext）负责创建bean，并通过容器将功能类bean注入到你需要的bean中。\nspring提供使用xml、注解、java配置、groovy配置实现bean的创建和注入。")]),a._v(" "),r("p",[a._v("无论是xml配置、注解配置还是java配置，都被称为配置元数据，所谓元数据集描述数据的数据。\n元数据本身不具备任何可执行能力，只能通过外界代码来对这些元数据进行解析后进行一些有意义的操作。\nspring容器解析这些配置元数据进行bean的初始化、配置和管理依赖。")]),a._v(" "),r("h3",{attrs:{id:"_1-声明bean的注解。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-声明bean的注解。"}},[a._v("#")]),a._v(" 1.声明bean的注解。")]),a._v(" "),r("ul",[r("li",[a._v("@Component组件，无明确的角色。")]),a._v(" "),r("li",[a._v("@Service在service层使用。")]),a._v(" "),r("li",[a._v("@Repository在dao层使用。")]),a._v(" "),r("li",[a._v("@Controller在控制层使用（展现层）。")])]),a._v(" "),r("p",[a._v("声明名称不同，作用等效，根据需要选用。")]),a._v(" "),r("h3",{attrs:{id:"_2-注入bean的注解，一般情况下通用。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-注入bean的注解，一般情况下通用。"}},[a._v("#")]),a._v(" 2.注入bean的注解，一般情况下通用。")]),a._v(" "),r("ul",[r("li",[a._v("@Autowired：spring注解。")]),a._v(" "),r("li",[a._v("@Inject：JSR-330提供的注解。")]),a._v(" "),r("li",[a._v("@Resource：JSR-250提供的注解。")])]),a._v(" "),r("p",[a._v("注入bean注解般用在set方法上或者属性上，一般用在属性上。")]),a._v(" "),r("ul",[r("li",[a._v("@Configuration 声明配置类注解")]),a._v(" "),r("li",[a._v("@ComponentScan 包扫描注解，扫描1")])]),a._v(" "),r("h2",{attrs:{id:"java配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java配置"}},[a._v("#")]),a._v(" java配置")]),a._v(" "),r("p",[a._v("java配置是spring 4.x推荐的配置方式，可以完全替代xml配置。\njava配置是通过@Configuration和@Bean来实现的。")]),a._v(" "),r("ul",[r("li",[a._v("@Configuration声明一个类为配置类，相当于spring的xml配置文件。")]),a._v(" "),r("li",[a._v("@Bean注解在方法上，声明当前方法的返回值为一个Bean。")])]),a._v(" "),r("p",[a._v("配置原则：全局配置使用java配置（数据库配置、mvc配置等），业务bean配置使用注解配置（@Controller等）。")]),a._v(" "),r("p",[a._v("注：只要是spring容器中有的bean，都可以作为参数注入到使用该bean的bean的声明方法参数中。")]),a._v(" "),r("h2",{attrs:{id:"aop"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[a._v("#")]),a._v(" AOP")]),a._v(" "),r("p",[a._v("面向切面编程-spring支持AspectJ的注解式切面编程。")]),a._v(" "),r("ul",[r("li",[a._v("1.@Aspect声明是一个切面")]),a._v(" "),r("li",[a._v("2.@After、@Before、@Around定义advice，可直接将拦截规则（切点）作为参数。")]),a._v(" "),r("li",[a._v("3.@After、@Before、@Around参数的拦截规则为切点（PointCut），为使切点复用，可使用@PointCut专门定义拦截规则，然后在@After、@Before、@Around的参数中调用。")]),a._v(" "),r("li",[a._v("4.其中符合条件的每一个被拦截处为连接点（joinPoint）。")])]),a._v(" "),r("h3",{attrs:{id:"_1-基于注解拦截-2-基于方法规则拦截"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-基于注解拦截-2-基于方法规则拦截"}},[a._v("#")]),a._v(" 1.基于注解拦截 2.基于方法规则拦截")]),a._v(" "),r("p",[a._v("能够很好的控制拦截粒度和获得更丰富的信息。")]),a._v(" "),r("ul",[r("li",[a._v("1.添加aop和aspectj依赖")]),a._v(" "),r("li",[a._v("2.编写拦截规则注解")]),a._v(" "),r("li",[a._v("3.编写使用注解的被拦截类")]),a._v(" "),r("li",[a._v("4.编写使用方法规则被拦截类")]),a._v(" "),r("li",[a._v("5.编写切面")]),a._v(" "),r("li",[a._v("6.配置类")]),a._v(" "),r("li",[a._v("7.运行测试")])]),a._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/shihe110/shihe-spring-samples/tree/master/shihe-spring-aop",target:"_blank",rel:"noopener noreferrer"}},[a._v("示例代码"),r("OutboundLink")],1)]),a._v(" "),r("h3",{attrs:{id:"spring本身aop注解拦截的使用体现：1-事务处理（-transcation）-2-数据缓存（-cacheable）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring本身aop注解拦截的使用体现：1-事务处理（-transcation）-2-数据缓存（-cacheable）"}},[a._v("#")]),a._v(" Spring本身aop注解拦截的使用体现：1.事务处理（@Transcation） 2.数据缓存（@Cacheable）")])])}),[],!1,null,null,null);v.default=e.exports}}]);