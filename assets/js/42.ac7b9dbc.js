(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{385:function(e,t,n){"use strict";n.r(t);var r=n(42),i=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"spring事件applicationevent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring事件applicationevent"}},[e._v("#")]),e._v(" Spring事件ApplicationEvent")]),e._v(" "),n("p",[e._v("spring 事件为bean与bean之间消息通信提供了支持。\n当一个bean处理完一个任务后，希望另一个bean知道并能做相应的处理。\n这时我们要让另一个bean监听当前bean所发送的事件。")]),e._v(" "),n("p",[e._v("流程：")]),e._v(" "),n("ul",[n("li",[e._v("1.自定义事件，继承ApplicationEvent")]),e._v(" "),n("li",[e._v("2.定义事件监听，实现ApplicationListener")]),e._v(" "),n("li",[e._v("3.使用容器发布事件")])]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/shihe110/shihe-spring-samples/tree/master/shihe-spring-application-event",target:"_blank",rel:"noopener noreferrer"}},[e._v("spring事件示例代码"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://github.com/shihe110/shihe-springboot-samples/tree/master/shihe-springboot-event",target:"_blank",rel:"noopener noreferrer"}},[e._v("springBoot使用事件示例"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=i.exports}}]);