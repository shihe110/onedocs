(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{397:function(e,t,n){"use strict";n.r(t);var r=n(42),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"本篇主要在基于ssm的框架，深入讲解web-xml的配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本篇主要在基于ssm的框架，深入讲解web-xml的配置"}},[e._v("#")]),e._v(" 本篇主要在基于SSM的框架，深入讲解web.xml的配置")]),e._v(" "),n("p",[e._v("web.xml\n每个javaEE项目中都会有，web.xml文件是用来初始化配置信息：比如Welcome页面、servlet、servlet-mapping、filter、listener、启动加载级别等。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v(" web.xml配置文件内容如下：\n")])])]),e._v(' <!DOCTYPE web-app PUBLIC\n "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"\n "http://java.sun.com/dtd/web-app_2_3.dtd" >\n'),n("web-app",[n("display-name",[e._v("Archetype Created Web Application")]),e._v(" "),n("welcome-file-list",[n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("<welcome-file>index.jsp</welcome-file>\n")])])])]),e._v(" "),n("context-param",[n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("<description>配置Spring配置文件路径</description>\n<param-name>contextConfigLocation</param-name>\n\n<param-value>classpath:spring/applicationContext.xml</param-value>\n")])])])]),e._v(" "),n("listener",[n("listener-class",[e._v("\n      org.springframework.web.context.request.RequestContextListener\n    ")])],1),e._v(" "),n("listener",[n("listener-class",[e._v("org.springframework.web.context.ContextLoaderListener")])],1),e._v(" "),n("context-param",[n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("<param-name>log4jConfigLocation</param-name>\n<param-value>classpath:log4j.properties</param-value>\n")])])])]),e._v(" "),n("context-param",[n("param-name",[e._v("log4jRefreshInterval")]),e._v(" "),n("param-value",[e._v("1800000")])],1),e._v(" "),n("context-param",[n("param-name"),e._v(" "),n("param-value")],1),e._v(" "),n("filter",[n("filter-name",[e._v("encodingFilter")]),e._v(" "),n("filter-class",[e._v("org.springframework.web.filter.CharacterEncodingFilter")]),e._v(" "),n("init-param",[n("param-name",[e._v("encoding")]),e._v(" "),n("param-value",[e._v("UTF-8")])],1),e._v(" "),n("init-param",[n("param-name",[e._v("forceEncoding")]),e._v(" "),n("param-value",[e._v("true")])],1)],1),e._v(" "),n("filter-mapping",[n("filter-name",[e._v("encodingFilter")]),e._v(" "),n("url-pattern",[e._v("/*")])],1),e._v(" "),n("servlet",[n("servlet-name",[e._v("springMVC")]),e._v(" "),n("servlet-class",[e._v("org.springframework.web.servlet.DispatcherServlet")]),e._v(" "),n("init-param",[n("param-name",[e._v("contextConfigLocation")]),e._v(" "),n("param-value",[e._v("classpath:spring/spring-mvc.xml")])],1),e._v(" "),n("load-on-startup",[e._v("1")]),e._v(" "),n("async-supported",[e._v("true")])],1),e._v(" "),n("servlet-mapping",[n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("<servlet-name>springMVC</servlet-name>\n\x3c!-- 此处可以可以配置成*.do，对应struts的后缀习惯 --\x3e\n<url-pattern>/</url-pattern>\n")])])])]),e._v(" "),n("servlet-mapping",[n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("<servlet-name>default</servlet-name>\n<url-pattern>/static/*</url-pattern>\n")])])])]),e._v(" "),n("session-config",[n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("<session-timeout>30</session-timeout>\n")])])])])],1),e._v("\n首先介绍一下启动一个项目的整体流程：\n tomcat启动一个WEB项目的时候，WEB容器会去读取它的配置文件web.xml，读取"),n("listener",[e._v("和"),n("context-param",[e._v("两个结点。\n  紧接着，容器创建一个ServletContext（servlet上下文，全局的），这个web项目的所有部分都将共享这个上下文。可以把ServletContext看成是一个Web应用的服务器端组件的共享内存，在ServletContext中可以存放共享数据。ServletContext对象是真正的一个全局对象，凡是web容器中的Servlet都可以访问\n容器将"),n("context-param",[e._v("转换为键值对，并交给servletContext。\n 容器创建"),n("listener",[e._v("中的类实例，创建监听器。 \n"),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("   以上步骤，都是基于web.xml的配置文件进行操作的，现在简单说一下，web.xml文件主要的工作包括两部分：1、web.xml启动spring容器；2、DispathcheServlet的声明；3、其余工作是session过期，字符串编码等\n   web.xml中标签的加载顺序：<context-param>  >  <listener> (spring的相关工作)  >  filter >servlet（springmvc的相关工作）\n")])])]),n("p",[e._v("A、web.xml启动spring容器的加载过程：\n读取web.xml中两个节点，"),n("context-param",[e._v("  >  "),n("listener",[e._v("，创建ServletContext对象，listener中ContextLoaderListener监听器的作用就是启动Web容器时，监听servletContext对象的变化，获取servletContext对象的"),n("context-param",[e._v("，来自动装配ApplicationContext的配置信息。")])],1)],1)],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v(" 1） 当我们启动一个WEB项目容器时，容器包括(JBoss,Tomcat等)。首先会去读取web.xml配置文件里的配置，当这一步骤没有出错并且完成之后，项目才能正常的被启动起来。\n\n 2） 启动WEB项目的时候：\n\n   容器首先会去读取web.xml配置文件中的两个节点：\n\n           第一个节点：<context-param> </context-param> ，<context-param>是web应用的资源配置，是wen应用的上下文参数，如数据库连接方式，spring的配置文件路径（application.xml）等，这些键值对都会加入到servletContext对象。\n\n           第二个节点：<listener> </listener>，<listener>可以获取当前该web应用对象，即servletContext对象，获取context-param值，进而获取资源，在web应用启动前操作）  ,listener中ContextLoaderListener监听器的作用就是启动Web容器时，监听servletContext对象的变化，获取servletContext对象的<context-param>，来自动装配ApplicationContext的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。\n")])])]),n("context-param",[e._v("元素含有一对参数名和参数值，用作应用的Servlet上下文初始化参数，参数名在整个Web应用中必须是惟一的，在web应用的整个生命周期中上下文初始化参数都存在，任意的Servlet和jsp都可以随时随地访问它。"),n("context-param",[e._v("用于向 ServletContext 提供键值对。\n"),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('   监听器<Listener>，它是实现了javax.servlet.ServletContextListener 接口的服务器端程序，它也是随web应用的启动而启动，只初始化一次，随web应用的停止而销毁。主要作用是： listener中ContextLoaderListener监听器的作用就是启动Web容器时，监听servletContext对象的变化，获取servletContext对象的<context-param>，来自动装配ApplicationContext的配置信息。\n\n 3）紧接着，容器创建一个ServletContext(application),这个web项目的所有部分都将共享这个上下文。容器以<context-param></context-param>的name作为键，value作为值，将其转化为键值对，存入ServletContext。ServletContext即代表当前web应用。\n\n 4）容器创建<listener></listener>中的类实例,即创建监听.，listener中ContextLoaderListener监听器的作用就是启动Web容器时，监听servletContext对象的变化，获取servletContext对象的<context-param>，来自动装配ApplicationContext的配置信息。\n\n 5） 监听器中通过contextInitialized(ServletContextEvent args)初始化方法，来获得ServletContext 对象以及context-param值。\n\n              ServletContext = ServletContextEvent.getServletContext();\n\n              context-param的值 = ServletContext.getInitParameter("context-param的键");\n\n    6）  拿到这个context-param的值之后,可以在WEB项目还没有完全启动时，进行一些初始化工作，但是最主要的还是自动装配ApplicationContext的配置信息。\n\n    7）   .举例.你可能想在项目启动之前就打开数据库.\n       那么这里就可以在<context-param>中设置数据库的连接方式,在监听类中初始化数据库的连接.。这个监听是自己写的一个类,除了初始化方法,它还有销毁方法.用于关闭应用前释放资源.比如说数据库连接的关闭.\n')])])]),n("p",[e._v("B、DispathcheServlet的声明（主要是servlet标签的配置,，主要配置springmvc）\nDispatcherServlet是前端控制器设计模式的实现，提供Spring Web MVC的集中访问点（也就是把前端请求分发到目标controller），而且与Spring IoC容器无缝集成，从而可以获得Spring的所有好处。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("DispatcherServlet主要用作职责调度工作，本身主要用于控制流程，主要职责如下：\n")])])]),n("p",[e._v("文件上传解析，如果请求类型是multipart将通过MultipartResolver进行文件上传解析；\n通过HandlerMapping，将请求映射到处理器（返回一个HandlerExecutionChain，它包括一个处理器、多个HandlerInterceptor拦截器）；\n通过HandlerAdapter支持多种类型的处理器(HandlerExecutionChain中的处理器)；\n通过ViewResolver解析逻辑视图名到具体视图实现；\n本地化解析；\n渲染具体的视图等；\n如果执行过程中遇到异常将交给HandlerExceptionResolver来解析。\n从以上我们可以看出DispatcherServlet主要负责流程的控制（而且在流程中的每个关键点都是很容易扩展的）。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v(" web.xml中spring的核心ContextLoaderListener初始化的上下文和springmvc的核心DispatcherServlet初始化的上下文关系：\n")])])]),n("p",[e._v("从图中可以看出：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  ContextLoaderListener初始化的上下文加载的Bean是对于整个应用程序共享的，不管是使用什么表现层技术，一般如DAO层、Service层Bean；\n\n DispatcherServlet初始化的上下文加载的Bean是只对Spring Web MVC有效的Bean，如Controller、HandlerMapping、HandlerAdapter等等，该初始化上下文应该只加载Web相关组件。\n")])])]),n("p",[e._v("小结：\n1、javaEE项目启动过程：首先加载Spring上下文环境配置文件，然后加载SpringMVC配置文件。\nSpring配置加载过程：\ntomcat服务器启动一个WEB项目的时候，WEB容器会去读取它的配置文件web.xml，然后会读取它的listener和context-param节点，然后紧接着会创建一个ServletContext（servlet上下文，全局的），这个web项目的所有部分都将共享这个上下文，容器将"),n("context-param",[e._v("转换为键值对，并交给servletContext，"),n("listener",[e._v("可以获取当前该web应用对象，即servletContext对象，获取context-param值，进而获取资源，在web应用启动前操作）  ,listener中ContextLoaderListener监听器的作用就是启动Web容器时，监听servletContext对象的变化，获取servletContext对象的"),n("context-param",[e._v("，来自动装配ApplicationContext的配置信息。这样spring的加载过程就完成了。")])],1)],1)],1),e._v(" "),n("p",[e._v("SpringMVC配置加载过程：\nspringMVC其实和spring是一样的，但是它不用在程序开始时访问。springMVC的加载过程是通过Servlet节点 。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  Servlet介绍：\n\n    Servlet通常称为服务端小程序，是服务端的程序，用于处理及响应客户的请求。Servlet是一个特殊的Java类，创建Servlet类自动继承HttpServlet。客户端通常只有GET和POST两种请求方式，Servlet为了响应这两种请求，必须重写doGet()和doPost()方法。大部分时候，Servlet对于所有的请求响应都是完全一样的，此时只需要重写service()方法即可响应客户端的所有请求。\n\n   创建Servlet实例有两个时机：\n")])])]),n("p",[e._v("客户端第一次请求某个Servlet时，系统创建该Servlet的实例，大部分Servlet都是这种Servlet；\nweb应用启动时立即创建Servlet实例，即"),n("load-on-start",[e._v("1"),e._v("\n2、监听器如何进行项目的初始化\n监听器中通过contextInitialized(ServletContextEvent args)初始化方法，来获得ServletContext 对象以及context-param值。")])],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('                          ServletContext = ServletContextEvent.getServletContext();\n\n                          context-param的值 = ServletContext.getInitParameter("context-param的键");\n\n   拿到这个context-param的值之后,可以在WEB项目还没有完全启动时，进行一些初始化工作，但是最主要的还是自动装配ApplicationContext的配置信息。\n')])])]),n("p",[e._v("3、spring和springMVC整合后，可以取消掉web.xml中spring的listener配置吗？\n如果只有 Spring mvc 的一个 Servlet，listener 可以不用。\n但是如果用了Shiro 等，Shiro 用到的 Spring 的配置必须在 listener 里加载。\n一般 Dao, Service 的 Spring 配置都会在 listener 里加载，因为可能会在多个 Servlet 里用到，因为父子 Context 的可见性问题，防止重复加载所以在 listener 里加载。\n4、web.xml中spring的核心ContextLoaderListener初始化的上下文和springmvc的核心DispatcherServlet初始化的上下文关系")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v(" ContextLoaderListener初始化的上下文加载的Bean是对于整个应用程序共享的   ：一般如DAO层、Service层Bean；\n DispatcherServlet初始化的上下文加载的Bean是只对Spring Web MVC有效的Bean，如Controller，该初始化上下文应该只加载Web相关组件。\n")])])]),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/qq_35571554/article/details/82385838",target:"_blank",rel:"noopener noreferrer"}},[e._v("文章出处"),n("OutboundLink")],1)])])],1)],1)],1)],1)],1)],1)}),[],!1,null,null,null);t.default=a.exports}}]);