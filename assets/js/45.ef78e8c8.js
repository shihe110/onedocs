(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{390:function(t,a,e){"use strict";e.r(a);var r=e(42),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"java多线程实现的两种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java多线程实现的两种方式"}},[t._v("#")]),t._v(" java多线程实现的两种方式")]),t._v(" "),e("h2",{attrs:{id:"_1-继承thread类，复写run-方法作为线程操作主体。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-继承thread类，复写run-方法作为线程操作主体。"}},[t._v("#")]),t._v(" 1.继承Thread类，复写run()方法作为线程操作主体。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class CustomThread extends Thread {\n    private String threadName;\n    public CustomThread(String threadName) {\n        this.threadName = threadName;\n    }\n    @Override\n    public void run() {\n        for (int i = 0; i < 10; i++) {\n            System.out.println(threadName + "启动执行！ "+i);\n        }\n    }\n}\n\npublic static void main(String[] args) {\n        CustomThread thread = new CustomThread("线程A");\n        CustomThread thread2 = new CustomThread("线程B");\n        CustomThread thread3 = new CustomThread("线程C");\n\n        thread.start();\n        thread2.start();\n        thread3.start();\n    }\n')])])]),e("h2",{attrs:{id:"_2-实现runnable接口，复写run-方法作为线程操作主体。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现runnable接口，复写run-方法作为线程操作主体。"}},[t._v("#")]),t._v(" 2.实现Runnable接口，复写run()方法作为线程操作主体。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class CustomThreadV2 implements Runnable{\n    private String threadName;\n    public CustomThreadV2(String threadName) {\n        this.threadName = threadName;\n    }\n\n    public void run() {\n        for (int i = 0; i < 10; i++) {\n            System.out.println(threadName+" 启动！ "+i);\n        }\n    }\n}\n\n    public static void main(String[] args) {\n        CustomThreadV2 thread = new CustomThreadV2("线程A");\n        CustomThreadV2 thread2 = new CustomThreadV2("线程B");\n        CustomThreadV2 thread3 = new CustomThreadV2("线程C");\n\n        Thread t1 = new Thread(thread);\n        Thread t2 = new Thread(thread2);\n        Thread t3 = new Thread(thread3);\n\n        t1.start();\n        t2.start();\n        t3.start();\n    }\n')])])])])}),[],!1,null,null,null);a.default=n.exports}}]);