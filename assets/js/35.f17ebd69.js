(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{401:function(a,t,n){"use strict";n.r(t);var s=n(42),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"ioc原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ioc原理"}},[a._v("#")]),a._v(" IOC原理")]),a._v(" "),n("p",[a._v("IoC又称为依赖注入（DI：Dependency Injection），它解决了一个最主要的问题：将组件的创建+配置与组件的使用相分离，并且，由IoC容器负责管理组件的生命周期。")]),a._v(" "),n("p",[a._v("因为IoC容器要负责实例化所有的组件，因此，有必要告诉容器如何创建组件，以及各组件的依赖关系。一种最简单的配置是通过XML文件来实现，例如：")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("beans")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("dataSource"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("class")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("HikariDataSource"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("bookService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("class")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("BookService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("property")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("dataSource"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("ref")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("dataSource"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("bean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("userService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("class")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("UserService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("property")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("dataSource"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("ref")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("dataSource"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("bean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("beans")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),n("p",[a._v("上述XML配置文件指示IoC容器创建3个JavaBean组件，并把id为dataSource的组件通过属性dataSource（即调用setDataSource()方法）注入到另外两个组件中。")]),a._v(" "),n("p",[a._v("在Spring的IoC容器中，我们把所有组件统称为JavaBean，即配置一个组件就是配置一个Bean。")]),a._v(" "),n("h3",{attrs:{id:"依赖注入方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入方式"}},[a._v("#")]),a._v(" 依赖注入方式")]),a._v(" "),n("p",[a._v("我们从上面的代码可以看到，依赖注入可以通过set()方法实现。但依赖注入也可以通过构造方法实现。")]),a._v(" "),n("p",[a._v("很多Java类都具有带参数的构造方法，如果我们把BookService改造为通过构造方法注入，那么实现代码如下：")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v("public class BookService {\n    private DataSource dataSource;\n\n    public BookService(DataSource dataSource) {\n        this.dataSource = dataSource;\n    }\n}\n")])])]),n("p",[a._v("Spring的IoC容器同时支持属性注入和构造方法注入，并允许混合使用。")]),a._v(" "),n("h3",{attrs:{id:"无侵入容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#无侵入容器"}},[a._v("#")]),a._v(" 无侵入容器")]),a._v(" "),n("p",[a._v("在设计上，Spring的IoC容器是一个高度可扩展的无侵入容器。所谓无侵入，是指应用程序的组件无需实现Spring的特定接口，或者说，组件根本不知道自己在Spring的容器中运行。这种无侵入的设计有以下好处：")]),a._v(" "),n("p",[a._v("应用程序组件既可以在Spring的IoC容器中运行，也可以自己编写代码自行组装配置；\n测试的时候并不依赖Spring容器，可单独进行测试，大大提高了开发效率。")]),a._v(" "),n("h2",{attrs:{id:"装备bean（容器中bean的装配方式-xml、annotation）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#装备bean（容器中bean的装配方式-xml、annotation）"}},[a._v("#")]),a._v(" 装备bean（容器中bean的装配方式-xml、annotation）")]),a._v(" "),n("h3",{attrs:{id:"容器装配-xml装配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#容器装配-xml装配"}},[a._v("#")]),a._v(" 容器装配-xml装配")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v('ApplicationContext context = new ClassPathXmlApplicationContext("application.xml");\n\n// xml配置文件application.xml\n'),n("span",{pre:!0,attrs:{class:"token prolog"}},[a._v('<?xml version="1.0" encoding="UTF-8"?>')]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("beans")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("xmlns")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("http://www.springframework.org/schema/beans"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[n("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("xmlns:")]),a._v("xsi")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("http://www.w3.org/2001/XMLSchema-instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[n("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("xsi:")]),a._v("schemaLocation")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("userService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("class")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("com.itranswarp.learnjava.service.UserService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("property")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("mailService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("ref")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("mailService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("bean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("mailService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("class")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("com.itranswarp.learnjava.service.MailService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("beans")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n\n每个"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("都有一个id标识，相当于Bean的唯一ID；\n在userServiceBean中，通过"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("property")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("..."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("ref")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("..."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("注入了另一个Bean；\nBean的顺序不重要，Spring根据依赖关系会自动正确初始化。\n\n而是boolean、int、String这样的数据类型，则通过value注入\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("dataSource"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("class")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("com.zaxxer.hikari.HikariDataSource"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("property")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("jdbcUrl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("value")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("jdbc:mysql://localhost:3306/test"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("property")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("username"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("value")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("property")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("password"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("value")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("password"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("property")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("maximumPoolSize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("value")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("10"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("property")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("autoCommit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("value")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("bean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n\n")])])]),n("h3",{attrs:{id:"使用bean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用bean"}},[a._v("#")]),a._v(" 使用bean")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v("// 获取Bean:\nUserService userService = context.getBean(UserService.class);\n\n")])])]),n("h3",{attrs:{id:"spring两种容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring两种容器"}},[a._v("#")]),a._v(" spring两种容器")]),a._v(" "),n("p",[a._v("Spring容器就是ApplicationContext，它是一个接口，有很多实现类，这里我们选择ClassPathXmlApplicationContext，表示它会自动从classpath中查找指定的XML配置文件。")]),a._v(" "),n("p",[a._v("获得了ApplicationContext的实例，就获得了IoC容器的引用。从ApplicationContext中我们可以根据Bean的ID获取Bean，但更多的时候我们根据Bean的类型获取Bean的引用：")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v("UserService userService = context.getBean(UserService.class);\n")])])]),n("p",[a._v("Spring还提供另一种IoC容器叫BeanFactory，使用方式和ApplicationContext类似：")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v('BeanFactory factory = new XmlBeanFactory(new ClassPathResource("application.xml"));\nMailService mailService = factory.getBean(MailService.class);\n')])])]),n("p",[a._v("BeanFactory和ApplicationContext的区别在于，BeanFactory的实现是按需创建，即第一次获取Bean时才创建这个Bean，而ApplicationContext会一次性创建所有的Bean。\n实际上，ApplicationContext接口是从BeanFactory接口继承而来的，并且，ApplicationContext提供了一些额外的功能，包括国际化支持、事件和通知机制等。\n通常情况下，我们总是使用ApplicationContext，很少会考虑使用BeanFactory。")]),a._v(" "),n("h2",{attrs:{id:"容器装配-annotation配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#容器装配-annotation配置"}},[a._v("#")]),a._v(" 容器装配-annotation配置")]),a._v(" "),n("p",[a._v("除了使用xml装配bean，还可以使用Annotation配置，可以完全不需要XML，让Spring自动扫描Bean并组装它们。\n例如")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v('@Component\npublic class MailService {\n    ...\n}\n// 这个@Component注解就相当于定义了一个Bean，它有一个可选的名称，默认是mailService，即小写开头的类名。\n   \n//   然后，我们给UserService添加一个@Component注解和一个@Autowired注解：\n@Component\npublic class UserService {\n    @Autowired\n    MailService mailService;\n    ...\n}\n// 使用@Autowired就相当于把指定类型的Bean注入到指定的字段中。和XML配置相比，@Autowired大幅简化了注入，因为它不但可以写在set()方法上，还可以直接写在字段上，甚至可以写在构造方法中：\n@Component\npublic class UserService {\n    MailService mailService;\n\n    public UserService(@Autowired MailService mailService) {\n        this.mailService = mailService;\n    }\n    ...\n}\n\n//我们一般把@Autowired写在字段上，通常使用package权限的字段，便于测试。最后，编写一个AppConfig类启动容器：\n@Configuration\n@ComponentScan\npublic class AppConfig {\n    public static void main(String[] args) {\n        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\n        UserService userService = context.getBean(UserService.class);\n        User user = userService.login("bob@example.com", "password");\n        System.out.println(user.getName());\n    }\n}\n\n//除了main()方法外，AppConfig标注了@Configuration，表示它是一个配置类，因为我们创建ApplicationContext时：\n')])])]),n("h3",{attrs:{id:"configuration的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuration的作用"}},[a._v("#")]),a._v(" @Configuration的作用")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v("ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\n")])])]),n("p",[a._v("使用的实现类是AnnotationConfigApplicationContext，必须传入一个标注了@Configuration的类名。")]),a._v(" "),n("p",[a._v("此外，AppConfig还标注了@ComponentScan，它告诉容器，自动搜索当前类所在的包以及子包，把所有标注为@Component的Bean自动创建出来，并根据@Autowired进行装配。")]),a._v(" "),n("h2",{attrs:{id:"bean-scope"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bean-scope"}},[a._v("#")]),a._v(" bean scope")]),a._v(" "),n("p",[a._v("容器默认的bean是单例的，若需要非单例bean，则需要用到@Scope")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v('@Component\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) // @Scope("prototype")\npublic class MailSession {\n    ...\n}\n')])])]),n("h3",{attrs:{id:"list注入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list注入"}},[a._v("#")]),a._v(" list注入")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v('注入List\n有些时候，我们会有一系列接口相同，不同实现类的Bean。例如，注册用户时，我们要对email、password和name这3个变量进行验证。为了便于扩展，我们先定义验证接口：\n\npublic interface Validator {\n    void validate(String email, String password, String name);\n}\n然后，分别使用3个Validator对用户参数进行验证：\n\n@Component\npublic class EmailValidator implements Validator {\n    public void validate(String email, String password, String name) {\n        if (!email.matches("^[a-z0-9]+\\\\@[a-z0-9]+\\\\.[a-z]{2,10}$")) {\n            throw new IllegalArgumentException("invalid email: " + email);\n        }\n    }\n}\n\n@Component\npublic class PasswordValidator implements Validator {\n    public void validate(String email, String password, String name) {\n        if (!password.matches("^.{6,20}$")) {\n            throw new IllegalArgumentException("invalid password");\n        }\n    }\n}\n\n@Component\npublic class NameValidator implements Validator {\n    public void validate(String email, String password, String name) {\n        if (name == null || name.isBlank() || name.length() > 20) {\n            throw new IllegalArgumentException("invalid name: " + name);\n        }\n    }\n}\n最后，我们通过一个Validators作为入口进行验证：\n\n@Component\npublic class Validators {\n    @Autowired\n    List'),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("Validator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" validators;\n\n    public void validate(String email, String password, String name) {\n        for (var validator : this.validators) {\n            validator.validate(email, password, name);\n        }\n    }\n}\n注意到Validators被注入了一个List"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("Validator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("，Spring会自动把所有类型为Validator的Bean装配为一个List注入进来，这样一来，我们每新增一个Validator类型，就自动被Spring装配到Validators中了，非常方便。\n\n因为Spring是通过扫描classpath获取到所有的Bean，而List是有序的，要指定List中Bean的顺序，可以加上@Order注解：\n\n@Component\n@Order(1)\npublic class EmailValidator implements Validator {\n    ...\n}\n\n@Component\n@Order(2)\npublic class PasswordValidator implements Validator {\n    ...\n}\n\n@Component\n@Order(3)\npublic class NameValidator implements Validator {\n    ...\n}\n")])])]),n("h3",{attrs:{id:"可选注入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可选注入"}},[a._v("#")]),a._v(" 可选注入")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v("默认情况下，当我们标记了一个@Autowired后，Spring如果没有找到对应类型的Bean，它会抛出NoSuchBeanDefinitionException异常。\n    \n可以给@Autowired增加一个required = false的参数：\n\n@Component\npublic class MailService {\n    @Autowired(required = false)\n    ZoneId zoneId = ZoneId.systemDefault();\n    ...\n}\n这个参数告诉Spring容器，如果找到一个类型为ZoneId的Bean，就注入，如果找不到，就忽略。\n\n这种方式非常适合有定义就使用定义，没有就使用默认值的情况。\n")])])]),n("h3",{attrs:{id:"创建第三方bean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建第三方bean"}},[a._v("#")]),a._v(" 创建第三方Bean")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v('如果一个Bean不在我们自己的package管理之类，例如ZoneId，如何创建它？\n    \n    答案是我们自己在@Configuration类中编写一个Java方法创建并返回它，注意给方法标记一个@Bean注解：\n    \n    @Configuration\n    @ComponentScan\n    public class AppConfig {\n        // 创建一个Bean:\n        @Bean\n        ZoneId createZoneId() {\n            return ZoneId.of("Z");\n        }\n    }\n    Spring对标记为@Bean的方法只调用一次，因此返回的Bean仍然是单例。\n')])])]),n("h3",{attrs:{id:"初始化和销毁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化和销毁"}},[a._v("#")]),a._v(" 初始化和销毁")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v("\n有些时候，一个Bean在注入必要的依赖后，需要进行初始化（监听消息等）。在容器关闭时，有时候还需要清理资源（关闭连接池等）。我们通常会定义一个init()方法进行初始化，定义一个shutdown()方法进行清理，然后，引入JSR-250定义的Annotation：\n\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("javax.annotation"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("javax.annotation-api"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("1.3.2"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v('\n在Bean的初始化和清理方法上标记@PostConstruct和@PreDestroy：\n\n@Component\npublic class MailService {\n    @Autowired(required = false)\n    ZoneId zoneId = ZoneId.systemDefault();\n\n    @PostConstruct\n    public void init() {\n        System.out.println("Init mail service with zoneId = " + this.zoneId);\n    }\n\n    @PreDestroy\n    public void shutdown() {\n        System.out.println("Shutdown mail service");\n    }\n}\nSpring容器会对上述Bean做如下初始化流程：\n\n调用构造方法创建MailService实例；\n根据@Autowired进行注入；\n调用标记有@PostConstruct的init()方法进行初始化。\n而销毁时，容器会首先调用标记有@PreDestroy的shutdown()方法。\n\nSpring只根据Annotation查找无参数方法，对方法名不作要求。\n')])])]),n("h3",{attrs:{id:"使用别名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用别名"}},[a._v("#")]),a._v(" 使用别名")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v('\n默认情况下，对一种类型的Bean，容器只创建一个实例。但有些时候，我们需要对一种类型的Bean创建多个实例。例如，同时连接多个数据库，就必须创建多个DataSource实例。\n\n如果我们在@Configuration类中创建了多个同类型的Bean：\n\n@Configuration\n@ComponentScan\npublic class AppConfig {\n    @Bean\n    ZoneId createZoneOfZ() {\n        return ZoneId.of("Z");\n    }\n\n    @Bean\n    ZoneId createZoneOfUTC8() {\n        return ZoneId.of("UTC+08:00");\n    }\n}\nSpring会报NoUniqueBeanDefinitionException异常，意思是出现了重复的Bean定义。\n\n这个时候，需要给每个Bean添加不同的名字：\n\n@Configuration\n@ComponentScan\npublic class AppConfig {\n    @Bean("z")\n    ZoneId createZoneOfZ() {\n        return ZoneId.of("Z");\n    }\n\n    @Bean\n    @Qualifier("utc8")\n    ZoneId createZoneOfUTC8() {\n        return ZoneId.of("UTC+08:00");\n    }\n}\n可以用@Bean("name")指定别名，也可以用@Bean+@Qualifier("name")指定别名。\n\n存在多个同类型的Bean时，注入ZoneId又会报错：\n\nNoUniqueBeanDefinitionException: No qualifying bean of type \'java.time.ZoneId\' available: expected single matching bean but found 2\n意思是期待找到唯一的ZoneId类型Bean，但是找到两。因此，注入时，要指定Bean的名称：\n\n@Component\npublic class MailService {\n\t@Autowired(required = false)\n\t@Qualifier("z") // 指定注入名称为"z"的ZoneId\n\tZoneId zoneId = ZoneId.systemDefault();\n    ...\n}\n还有一种方法是把其中某个Bean指定为@Primary：\n\n@Configuration\n@ComponentScan\npublic class AppConfig {\n    @Bean\n    @Primary // 指定为主要Bean\n    @Qualifier("z")\n    ZoneId createZoneOfZ() {\n        return ZoneId.of("Z");\n    }\n\n    @Bean\n    @Qualifier("utc8")\n    ZoneId createZoneOfUTC8() {\n        return ZoneId.of("UTC+08:00");\n    }\n}\n这样，在注入时，如果没有指出Bean的名字，Spring会注入标记有@Primary的Bean。这种方式也很常用。例如，对于主从两个数据源，通常将主数据源定义为@Primary：\n\n@Configuration\n@ComponentScan\npublic class AppConfig {\n    @Bean\n    @Primary\n    DataSource createMasterDataSource() {\n        ...\n    }\n\n    @Bean\n    @Qualifier("slave")\n    DataSource createSlaveDataSource() {\n        ...\n    }\n}\n其他Bean默认注入的就是主数据源。如果要注入从数据源，那么只需要指定名称即可。\n')])])]),n("h3",{attrs:{id:"使用factorybean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用factorybean"}},[a._v("#")]),a._v(" 使用FactoryBean")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v("\n我们在设计模式的工厂方法中讲到，很多时候，可以通过工厂模式创建对象。Spring也提供了工厂模式，允许定义一个工厂，然后由工厂创建真正的Bean。\n\n用工厂模式创建Bean需要实现FactoryBean接口。我们观察下面的代码：\n\n@Component\npublic class ZoneIdFactoryBean implements FactoryBean"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("ZoneId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(' {\n\n    String zone = "Z";\n\n    @Override\n    public ZoneId getObject() throws Exception {\n        return ZoneId.of(zone);\n    }\n\n    @Override\n    public Class'),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" getObjectType() {\n        return ZoneId.class;\n    }\n}\n当一个Bean实现了FactoryBean接口后，Spring会先实例化这个工厂，然后调用getObject()创建真正的Bean。getObjectType()可以指定创建的Bean的类型，因为指定类型不一定与实际类型一致，可以是接口或抽象类。\n\n因此，如果定义了一个FactoryBean，要注意Spring创建的Bean实际上是这个FactoryBean的getObject()方法返回的Bean。为了和普通Bean区分，我们通常都以XxxFactoryBean命名。\n")])])]),n("h2",{attrs:{id:"resource-封装了读取配置文件或加载资源文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#resource-封装了读取配置文件或加载资源文件"}},[a._v("#")]),a._v(" Resource - 封装了读取配置文件或加载资源文件")]),a._v(" "),n("p",[a._v("在Java程序中，我们经常会读取配置文件、资源文件等。使用Spring容器时，我们也可以把“文件”注入进来，方便程序读取。")]),a._v(" "),n("p",[a._v("例如，AppService需要读取logo.txt这个文件，通常情况下，我们需要写很多繁琐的代码，主要是为了定位文件，打开InputStream。")]),a._v(" "),n("p",[a._v("Spring提供了一个org.springframework.core.io.Resource（注意不是javax.annotation.Resource），它可以像String、int一样使用@Value注入：")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v('@Component\npublic class AppService {\n    @Value("classpath:/logo.txt")\n    private Resource resource;\n\n    private String logo;\n\n    @PostConstruct\n    public void init() throws IOException {\n        try (var reader = new BufferedReader(\n                new InputStreamReader(resource.getInputStream(), StandardCharsets.UTF_8))) {\n            this.logo = reader.lines().collect(Collectors.joining("\\n"));\n        }\n    }\n}\n')])])]),n("p",[a._v("注入Resource最常用的方式是通过classpath，即类似classpath:/logo.txt表示在classpath中搜索logo.txt文件，然后，我们直接调用Resource.getInputStream()就可以获取到输入流，避免了自己搜索文件的代码。")]),a._v(" "),n("p",[a._v("也可以直接指定文件的路径，例如：")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v('@Value("file:/path/to/logo.txt")\nprivate Resource resource;\n')])])]),n("h2",{attrs:{id:"配置注入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置注入"}},[a._v("#")]),a._v(" 配置注入")]),a._v(" "),n("p",[a._v("在开发应用程序时，经常需要读取配置文件。最常用的配置方法是以key=value的形式写在.properties文件中。")]),a._v(" "),n("p",[a._v("例如，MailService根据配置的app.zone=Asia/Shanghai来决定使用哪个时区。要读取配置文件，我们可以使用上一节讲到的Resource来读取位于classpath下的一个app.properties文件。但是，这样仍然比较繁琐。")]),a._v(" "),n("p",[a._v("Spring容器还提供了一个更简单的@PropertySource来自动读取配置文件。我们只需要在@Configuration配置类上再添加一个注解：")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v('@Configuration\n@ComponentScan\n@PropertySource("app.properties") // 表示读取classpath的app.properties\npublic class AppConfig {\n    @Value("${app.zone:Z}")\n    String zoneId;\n\n    @Bean\n    ZoneId createZoneId() {\n        return ZoneId.of(zoneId);\n    }\n}\nSpring容器看到@PropertySource("app.properties")注解后，自动读取这个配置文件，然后，我们使用@Value正常注入：\n\n@Value("${app.zone:Z}")\nString zoneId;\n注意注入的字符串语法，它的格式如下：\n\n"${app.zone}"表示读取key为app.zone的value，如果key不存在，启动将报错；\n"${app.zone:Z}"表示读取key为app.zone的value，但如果key不存在，就使用默认值Z。\n这样一来，我们就可以根据app.zone的配置来创建ZoneId。\n\n还可以把注入的注解写到方法参数中：\n\n@Bean\nZoneId createZoneId(@Value("${app.zone:Z}") String zoneId) {\n    return ZoneId.of(zoneId);\n}\n')])])]),n("p",[a._v("可见，先使用@PropertySource读取配置文件，然后通过@Value以${key:defaultValue}的形式注入，可以极大地简化读取配置的麻烦。")]),a._v(" "),n("p",[a._v("另一种注入配置的方式是先通过一个简单的JavaBean持有所有的配置，例如，一个SmtpConfig：")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v('@Component\npublic class SmtpConfig {\n    @Value("${smtp.host}")\n    private String host;\n\n    @Value("${smtp.port:25}")\n    private int port;\n\n    public String getHost() {\n        return host;\n    }\n\n    public int getPort() {\n        return port;\n    }\n}\n然后，在需要读取的地方，使用#{smtpConfig.host}注入：\n\n@Component\npublic class MailService {\n    @Value("#{smtpConfig.host}")\n    private String smtpHost;\n\n    @Value("#{smtpConfig.port}")\n    private int smtpPort;\n}\n')])])]),n("p",[a._v('注意观察#{}这种注入语法，它和${key}不同的是，#{}表示从JavaBean读取属性。"#{smtpConfig.host}"的意思是，从名称为smtpConfig的Bean读取host属性，即调用getHost()方法。一个Class名为SmtpConfig的Bean，它在Spring容器中的默认名称就是smtpConfig，除非用@Qualifier指定了名称。')]),a._v(" "),n("p",[a._v('使用一个独立的JavaBean持有所有属性，然后在其他Bean中以#{bean.property}注入的好处是，多个Bean都可以引用同一个Bean的某个属性。例如，如果SmtpConfig决定从数据库中读取相关配置项，那么MailService注入的@Value("#{smtpConfig.host}")仍然可以不修改正常运行。')]),a._v(" "),n("h2",{attrs:{id:"条件装配（springboot灵魂）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#条件装配（springboot灵魂）"}},[a._v("#")]),a._v(" 条件装配（springboot灵魂）")]),a._v(" "),n("h3",{attrs:{id:"profile"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#profile"}},[a._v("#")]),a._v(" profile")]),a._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v('开发应用程序时，我们会使用开发环境，例如，使用内存数据库以便快速启动。而运行在生产环境时，我们会使用生产环境，例如，使用MySQL数据库。如果应用程序可以根据自身的环境做一些适配，无疑会更加灵活。\n\nSpring为应用程序准备了Profile这一概念，用来表示不同的环境。例如，我们分别定义开发、测试和生产这3个环境：\n\nnative\ntest\nproduction\n创建某个Bean时，Spring容器可以根据注解@Profile来决定是否创建。例如，以下配置：\n\n@Configuration\n@ComponentScan\npublic class AppConfig {\n    @Bean\n    @Profile("!test")\n    ZoneId createZoneId() {\n        return ZoneId.systemDefault();\n    }\n\n    @Bean\n    @Profile("test")\n    ZoneId createZoneIdForTest() {\n        return ZoneId.of("America/New_York");\n    }\n}\n如果当前的Profile设置为test，则Spring容器会调用createZoneIdForTest()创建ZoneId，否则，调用createZoneId()创建ZoneId。注意到@Profile("!test")表示非test环境。\n\n在运行程序时，加上JVM参数-Dspring.profiles.active=test就可以指定以test环境启动。\n\n实际上，Spring允许指定多个Profile，例如：\n\n-Dspring.profiles.active=test,master\n可以表示test环境，并使用master分支代码。\n\n要满足多个Profile条件，可以这样写：\n\n@Bean\n@Profile({ "test", "master" }) // 同时满足test和master\nZoneId createZoneId() {\n    ...\n}\n')])])]),n("h3",{attrs:{id:"conditional"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conditional"}},[a._v("#")]),a._v(" Conditional")]),a._v(" "),n("p",[a._v("除了根据@Profile条件来决定是否创建某个Bean外，Spring还可以根据@Conditional决定是否创建某个Bean。")]),a._v(" "),n("p",[a._v("例如，我们对SmtpMailService添加如下注解：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("@Component\n@Conditional(OnSmtpEnvCondition.class)\npublic class SmtpMailService implements MailService {\n    ...\n}\n")])])]),n("p",[a._v("它的意思是，如果满足OnSmtpEnvCondition的条件，才会创建SmtpMailService这个Bean。OnSmtpEnvCondition的条件是什么呢？我们看一下代码：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public class OnSmtpEnvCondition implements Condition {\n    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n        return "true".equalsIgnoreCase(System.getenv("smtp"));\n    }\n}\n')])])]),n("p",[a._v("因此，OnSmtpEnvCondition的条件是存在环境变量smtp，值为true。这样，我们就可以通过环境变量来控制是否创建SmtpMailService。")]),a._v(" "),n("p",[a._v("Spring只提供了@Conditional注解，具体判断逻辑还需要我们自己实现。Spring Boot提供了更多使用起来更简单的条件注解，例如，如果配置文件中存在app.smtp=true，则创建MailService：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('@Component\n@ConditionalOnProperty(name="app.smtp", havingValue="true")\npublic class MailService {\n    ...\n}\n')])])]),n("p",[a._v("如果当前classpath中存在类javax.mail.Transport，则创建MailService：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('@Component\n@ConditionalOnClass(name = "javax.mail.Transport")\npublic class MailService {\n    ...\n}\n')])])]),n("p",[a._v("后续我们会介绍Spring Boot的条件装配。我们以文件存储为例，假设我们需要保存用户上传的头像，并返回存储路径，在本地开发运行时，我们总是存储到文件：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('@Component\n@ConditionalOnProperty(name = "app.storage", havingValue = "file", matchIfMissing = true)\npublic class FileUploader implements Uploader {\n    ...\n}\n')])])]),n("p",[a._v("在生产环境运行时，我们会把文件存储到类似AWS S3上：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('@Component\n@ConditionalOnProperty(name = "app.storage", havingValue = "s3")\npublic class S3Uploader implements Uploader {\n    ...\n}\n')])])]),n("p",[a._v("其他需要存储的服务则注入Uploader：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("@Component\npublic class UserImageService {\n    @Autowired\n    Uploader uploader;\n}\n")])])]),n("p",[a._v("当应用程序检测到配置文件存在app.storage=s3时，自动使用S3Uploader，如果存在配置app.storage=file，或者配置app.storage不存在，则使用FileUploader。")]),a._v(" "),n("p",[a._v("可见，使用条件注解，能更灵活地装配Bean。")])])}),[],!1,null,null,null);t.default=e.exports}}]);