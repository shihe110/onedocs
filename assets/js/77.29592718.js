(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{420:function(t,e,s){"use strict";s.r(e);var a=s(42),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"redis学习笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis学习笔记"}},[t._v("#")]),t._v(" Redis学习笔记")]),t._v(" "),s("p",[t._v("mysql数据库引擎发展")]),t._v(" "),s("ul",[s("li",[t._v("MyISAM - 表锁（早些年的引擎，效率低下）")]),t._v(" "),s("li",[t._v("innoDB - 行级锁")])]),t._v(" "),s("p",[t._v("本质还是一个读和写的问题，发展开始使用分库分表解决写的压力。mysql还推出过表分区技术。")]),t._v(" "),s("p",[t._v("热榜数据、位置数据等（量大，变化快）就不适合mysql类的关系型数据库。图形数据库、json数据。")]),t._v(" "),s("p",[t._v("对于大文件、图片、博客等大数据量的问题：mongo")]),t._v(" "),s("h3",{attrs:{id:"目前一个基本互联网项目的架构："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目前一个基本互联网项目的架构："}},[t._v("#")]),t._v(" 目前一个基本互联网项目的架构：")]),t._v(" "),s("p",[t._v("用户--》企业防火墙或路由网关（负载均衡）--》app服务器")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("为什么用使用nosql")]),t._v(" "),s("p",[t._v("用户信息")]),t._v(" "),s("p",[t._v("地理位置")]),t._v(" "),s("p",[t._v("用户自己的数据")]),t._v(" "),s("p",[t._v("用户日志")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("什么是NoSql（不仅仅是sql）")]),t._v(" "),s("p",[t._v("泛指非关系型数据库")]),t._v(" "),s("p",[t._v("web2.0 视频 音乐 高并发社区、关系型数据库就不能满足需求")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("解耦")]),t._v(" "),s("p",[t._v("方便扩展（数据之间没有关系，方便扩展）")]),t._v(" "),s("p",[t._v("大数据量高性能：redis每秒可以读11万次写8万次，nosql的缓存是记录级别的，是一种细粒度的缓存")]),t._v(" "),s("p",[t._v("数据类型是多样的：（不需要事先设计数据库）")]),t._v(" "),s("p",[t._v("没有固定查询语言")]),t._v(" "),s("p",[t._v("键值对存储、列存储、文档存储、图形数据库")]),t._v(" "),s("p",[t._v("最终一致性")]),t._v(" "),s("p",[t._v("cap定理和base （异地多活）")]),t._v(" "),s("p",[t._v("高性能、高可用、高可扩展")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("大数据：3V + 3高")]),t._v(" "),s("p",[t._v("对问题的描述：（海量、多样、实时）")]),t._v(" "),s("p",[t._v("对程序的基本要求（高并发、高可扩展（动态扩展）、高性能）")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.基础信息")]),t._v("\n-- RDBMS\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2.商品描述，评论（文字较多）")]),t._v("\n- mongodb\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3.图片")]),t._v("\n- fastDFS\n- TFS\n- GFS\n- HDFS\n- oss\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4.商品关键字")]),t._v("\n- solr\n- ES\n- ISearch\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 5.商品热门信息（秒杀、排行）")]),t._v("\n- redis\n- tair\n- memechad\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 6.商品交易，支付接口")]),t._v("\n- 三方应用\n")])])]),s("p",[t._v("大型互联网应用的问题")]),t._v(" "),s("ul",[s("li",[t._v("数据类型太多")]),t._v(" "),s("li",[t._v("数据源太多")]),t._v(" "),s("li",[t._v("数据要改造，大面积改造")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("Nosql的四大分类")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("k-v键值对存储数据库")]),t._v(" "),s("ul",[s("li",[t._v("新浪 redis")]),t._v(" "),s("li",[t._v("美团 redis tair")]),t._v(" "),s("li",[t._v("阿里、百度 redis memecache")])])]),t._v(" "),s("li",[s("p",[t._v("文档数据库")]),t._v(" "),s("ul",[s("li",[t._v("mongodb （分布式文件存储的数据库，c++编写，处理大量文档，介于关系和非关系型数据库的中间产品，最像关系型的非关系型数据库）")]),t._v(" "),s("li",[t._v("contchDb")])])]),t._v(" "),s("li",[s("p",[t._v("列存储数据库")]),t._v(" "),s("ul",[s("li",[t._v("HBase")]),t._v(" "),s("li",[t._v("分布式文件系统")])])]),t._v(" "),s("li",[s("p",[t._v("图关系数据库（存关系）")]),t._v(" "),s("ul",[s("li",[t._v("社交数据关系拓扑")]),t._v(" "),s("li",[t._v("neo4j、infoGrid （社交网络、推荐系统、专注于构建关系图谱）")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"redis入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis入门"}},[t._v("#")]),t._v(" Redis入门")]),t._v(" "),s("h3",{attrs:{id:"redis概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis概述"}},[t._v("#")]),t._v(" redis概述")]),t._v(" "),s("p",[t._v("Redis（Remote Dictionary Server）远程字典服务，开源免费、c编写、支持网络、可基于内存也可以持久化的日志型，key-value数据库，并提供多种语言的api。")]),t._v(" "),s("h3",{attrs:{id:"redis能干啥？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis能干啥？"}},[t._v("#")]),t._v(" redis能干啥？")]),t._v(" "),s("p",[t._v("1、内存存储、持久化（rdb、aof）")]),t._v(" "),s("p",[t._v("2、效率高，高速缓存")]),t._v(" "),s("p",[t._v("3、发布订阅系统")]),t._v(" "),s("p",[t._v("4、地图信息分析")]),t._v(" "),s("p",[t._v("5、计时器、计数器（浏览量）")]),t._v(" "),s("h3",{attrs:{id:"特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[t._v("#")]),t._v(" 特性")]),t._v(" "),s("p",[s("strong",[t._v("1、多样数据类型")])]),t._v(" "),s("p",[t._v("Redis支持五种数据类型：string(字符串)、hash(哈希表)、list(列表)、set(集合)、zset(sorted set有序集合)")]),t._v(" "),s("p",[t._v("三种特殊数据类型：bitmaps、hyperloglog、geospatial")]),t._v(" "),s("p",[s("strong",[t._v("2、持久化")])]),t._v(" "),s("p",[t._v("rdb（快照持久化 redis database）、aof（append only file 日志文件持久化）")]),t._v(" "),s("p",[s("strong",[t._v("3、集群")])]),t._v(" "),s("p",[t._v("主从复制、哨兵模式、")]),t._v(" "),s("p",[s("strong",[t._v("4、事务")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("官网：redis.io")]),t._v(" "),s("p",[t._v("中文网：www.redis.cn  https://www.redis.net.cn/tutorial/3505.html")]),t._v(" "),s("p",[t._v("github：https://github.com/redis")]),t._v(" "),s("h3",{attrs:{id:"window安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#window安装"}},[t._v("#")]),t._v(" window安装")]),t._v(" "),s("p",[t._v("下载：")]),t._v(" "),s("p",[t._v("解压安装")]),t._v(" "),s("p",[t._v("启动")]),t._v(" "),s("p",[t._v("测试连接：ping")]),t._v(" "),s("h3",{attrs:{id:"linux安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux安装"}},[t._v("#")]),t._v(" Linux安装")]),t._v(" "),s("p",[t._v("1、下载：http://download.redis.io/releases/redis-6.0.8.tar.gz?_ga=2.12548340.175437557.1601005182-2129720179.1597734486")]),t._v(" "),s("p",[t._v("或：wget http://download.redis.io/releases/redis-6.0.8.tar.gz")]),t._v(" "),s("p",[t._v("2、解压")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" zxvf redisxxx\n")])])]),s("p",[t._v("3、基本环境安装：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" redis-6.x.x "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cd 到解压目录下")]),t._v("\n\nyum "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" gcc-c++ "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装gcc redis是c++写的所以需要安装gcc")]),t._v("\n\ngcc -v "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看安装情况")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),s("p",[t._v("4、redis默认安装路径：/usr/local/bin")]),t._v(" "),s("p",[t._v("5、将解压后redis配置文件拷贝到/usr/local/bin/新建一个文件夹")]),t._v(" "),s("p",[t._v("6、配置redis，设置守护进程为yes")]),t._v(" "),s("p",[t._v("7、启动 redis.server  /xxx/redis.conf指定使用哪个配置文件配置启动")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("redis.server  /xxx/redis.conf\n")])])]),s("p",[t._v("8、使用redis-cli连接测试")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("redis-cli -p "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ping")]),t._v("\n")])])]),s("p",[t._v("9、查看redis进程是否开启")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -ef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" redis\n")])])]),s("p",[t._v("10、关闭redis")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("shutdown \n\nexit\n")])])]),s("p",[t._v("11、再次查看进程")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -ef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" redis\n")])])]),s("p",[t._v("博客：https://www.cnblogs.com/happywish/p/10944253.html")]),t._v(" "),s("p",[t._v("https://blog.csdn.net/weidu01/article/details/105946606")]),t._v(" "),s("p",[t._v("12、单机多redis集群测试")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装redis报错 原因gcc版本过低")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# cc1: error: unrecognized command line option "-std=c11"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 解决办法：默认gcc版本一般情况是4.4.7，更新gcc版本，本方案升级到4.8.2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看gcc版本")]),t._v("\ngcc -v  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示4.4.7")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 下载4.8.2 解压")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" http://ftp.gnu.org/gnu/gcc/gcc-4.8.2/gcc-4.8.2.tar.gz\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -jxvf gcc-4.8.2.tar.gz\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 下载编译需求依赖")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" gcc-4.8.2\n./contrib/download_prerequisites\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建文件夹")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" gcc-build-4.8.2\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" gcc-build-4.8.2\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成makefile文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/configure  -enable-checking"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("release -enable-languages"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("c,c++ -disable-multilib\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编译安装")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装完成测试")]),t._v("\ngcc -v\n")])])]),s("p",[s("strong",[t._v("菜鸟安装教程")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" 下载地址\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -zxvf redis.xxxx.tar.gz\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" redis.xxx\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v("\n")])])]),s("p",[t._v("make完后目录下出现变异后redis服务程序redis-server，redis-cli位于src目录下")]),t._v(" "),s("p",[t._v("启动redis")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" src\n./redis-server  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用默认配置启动")]),t._v("\n")])])]),s("p",[t._v("使用配置文件启动")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" src \n./redis-server  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/redis.conf "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用配置文件 redis.conf启动，可以自定义")]),t._v("\n")])])]),s("p",[t._v("测试交互")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" src\n./redis.cli\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" name zhangsan\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("get name\n")])])]),s("hr"),t._v(" "),s("h3",{attrs:{id:"redis性能测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis性能测试"}},[t._v("#")]),t._v(" redis性能测试")]),t._v(" "),s("p",[t._v("（官方自带性能测试工具）")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("redis-benchmark "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("option value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("redis 性能测试工具可选参数如下所示：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("选项")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("默认值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("-h")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定服务器主机名")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("127.0.0.1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("-p")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定服务器端口")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("6379")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("-s")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定服务器 socket")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("-c")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定并发连接数")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("50")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("-n")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定请求数")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("10000")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("-d")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("以字节的形式指定 SET/GET 值的数据大小")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("2")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("-k")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1=keep alive 0=reconnect")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("-r")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("SET/GET/INCR 使用随机 key, SADD 使用随机值")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("-P")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("通过管道传输 "),s("numreq",[t._v(" 请求")])],1),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("-q")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("强制退出 redis。仅显示 query/sec 值")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("--csv")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("以 CSV 格式输出")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("-l")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("生成循环，永久执行测试")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("13")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("-t")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("仅运行以逗号分隔的测试命令列表。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("14")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("-I")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Idle 模式。仅打开 N 个 idle 连接并等待。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}})])])]),t._v(" "),s("p",[t._v("示例：测试100个并发，100000个请求")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("redis-benchmark -c "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" -n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100000")]),t._v(" -q\n")])])]),s("h3",{attrs:{id:"基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),s("p",[t._v("redis默认有16个数据库，默认使用第0个，使用select num切换数据库")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切第三个数据库")]),t._v("\n\ndbsize "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看库大小  # 可以使用不同的数据库存不同的数据")]),t._v("\n\nkeys * "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有的key")]),t._v("\n\nflushdb  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清空当前数据库")]),t._v("\n\nflushall "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清空所有数据库内容")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("redis是单线程的，为什么还这么快？")])]),t._v(" "),s("p",[t._v("redis是基于内存操作的，cpu不是redis性能瓶颈，redis的性能瓶颈在于机器的内存和网络带宽！所以就使用了单线程。redis是用c语言写的，官方数据qps 100000+")]),t._v(" "),s("p",[s("strong",[t._v("为什么redis单线程，还可以如此的快？")])]),t._v(" "),s("p",[t._v("一般来说速度：cpu>内存>硬盘")]),t._v(" "),s("p",[t._v("多线程需要CPU上下文切换，是一个耗时的操作。redis将所有数据全部放在内存中，所以对于一块内存使用单线程操作效率就是最高的。多次读写都在一个CPU上。")]),t._v(" "),s("h3",{attrs:{id:"redis配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis配置"}},[t._v("#")]),t._v(" Redis配置")]),t._v(" "),s("p",[t._v("redis的配置有两种方式：配置文件配置、命令行配置config")]),t._v(" "),s("p",[t._v("配置文件位置：redis安装目录下 redis.conf文件（window下命名为：redis.windows.conf）")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##################获取配置########################")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取配置 config get config_setting_name")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取日志配置")]),t._v("\nconfig get loglevel\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取所有配置")]),t._v("\nconfig get *\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("######################修改配置#####################")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置配置命令： config set config_setting_name  new_config_vlaue")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置日志级别")]),t._v("\nconfig "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" loglevel "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"notice"')]),t._v("\n\n")])])]),s("p",[t._v("**redis.conf配置文件说 **")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("配置项")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("daemonize no")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("pidfile /var/run/redis.pid")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("port 6379")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定 Redis 监听端口，默认端口为 6379，作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("bind 127.0.0.1")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("绑定的主机地址")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("timeout 300")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("loglevel notice")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("logfile stdout")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("databases 16")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("save <seconds> <changes>")]),t._v("Redis 默认配置文件中提供了三个条件："),s("strong",[t._v("save 900 1"),s("strong",[s("strong",[t._v("save 300 10")])]),t._v("save 60 10000")]),t._v("分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("rdbcompression yes")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("dbfilename dump.rdb")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定本地数据库文件名，默认值为 dump.rdb")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("dir ./")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定本地数据库存放目录")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("13")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("slaveof <masterip> <masterport>")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("设置当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("14")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("masterauth <master-password>")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("当 master 服务设置了密码保护时，slav 服务连接 master 的密码")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("15")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("requirepass foobared")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH "),s("password",[t._v(" 命令提供密码，默认关闭")])],1)]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("16")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("maxclients 128")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("17")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("maxmemory <bytes>")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("18")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("appendonly no")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("19")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("appendfilename appendonly.aof")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定更新日志文件名，默认为 appendonly.aof")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("20")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("appendfsync everysec")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定更新日志条件，共有 3 个可选值："),s("strong",[t._v("no")]),t._v("：表示等操作系统进行数据缓存同步到磁盘（快）"),s("strong",[t._v("always")]),t._v("：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）"),s("strong",[t._v("everysec")]),t._v("：表示每秒同步一次（折中，默认值）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("21")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("vm-enabled no")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("22")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("vm-swap-file /tmp/redis.swap")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("虚拟内存文件路径，默认值为 /tmp/redis.swap，不可多个 Redis 实例共享")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("23")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("vm-max-memory 0")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("24")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("vm-page-size 32")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("25")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("vm-pages 134217728")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("26")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("vm-max-threads 4")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("27")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("glueoutputbuf yes")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("28")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("hash-max-zipmap-entries 64 hash-max-zipmap-value 512")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("29")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("activerehashing yes")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("30")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("include /path/to/local.conf")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件")])])])]),t._v(" "),s("h3",{attrs:{id:"redis命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis命令"}},[t._v("#")]),t._v(" Redis命令")]),t._v(" "),s("p",[t._v("redis客户端： redis-cli")]),t._v(" "),s("p",[t._v("连接服务器命令")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ redis-cli  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连接本机服务器")]),t._v("\n$ redis-cli -h "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("host")]),t._v(" -p port -a password "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连接远程服务器")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 验证是否连接成功")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ping")]),t._v("\n\n$ redis-cli --raw  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 避免中文乱码")]),t._v("\n")])])]),s("p",[t._v("redis命令大全：http://www.kayooo.com/")]),t._v(" "),s("h3",{attrs:{id:"redis键命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis键命令"}},[t._v("#")]),t._v(" Redis键命令")]),t._v(" "),s("p",[t._v("作用：用于管理redis的键  语法：command key_name")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" keyname value_1\n$ del keyname  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除键名为keyname的键")]),t._v("\n$ exisis key "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查key是否存在")]),t._v("\n$ expire key "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置过期时间，以秒为单位，键key设置100秒过期")]),t._v("\n$ move keyname "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1表示当前数据库 移除当前key")]),t._v("\n$ keys pattern "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查找所有符合给定格式的key")]),t._v("\n$ persist key "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置永久不过期")]),t._v("\n$ ttl name "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询过期时间还剩多少")]),t._v("\n$ randomkey "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 随机返回一个key")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rename")]),t._v(" key newkey "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改key的名称")]),t._v("\n$ renamenx key newkey "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 仅当newkey不存在时，将key改名为newkey")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回key所存储的值的类型")]),t._v("\n$ dump key "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 序列化key,并返回被序列化的值")]),t._v("\n")])])]),s("h3",{attrs:{id:"五大数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五大数据类型"}},[t._v("#")]),t._v(" 五大数据类型")]),t._v(" "),s("p",[s("strong",[t._v("1.string（字符串）")])]),t._v(" "),s("p",[t._v("使用场景：计数器（incrby）、统计数量、粉丝数、对象缓存存储")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##########################################################################")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" k1 v1 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置key k1值为v1")]),t._v("\n$ get k1 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取k1的值")]),t._v("\n$ keys * "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所有key")]),t._v("\n\n$ exists key1 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是否存在")]),t._v("\n$ append key1 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 给key1的值追加拼接hello字符串，如果当前key不存在，则新建该key")]),t._v("\n$ strlen key1 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取字符串长度")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##########################################################################")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# i++ 操作")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" views "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始浏览量为0")]),t._v("\n$ incr views "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# key 浏览加 1")]),t._v("\n$ decr views "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# key views减 1")]),t._v("\n\n$ incrby views "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置增加步长 加10")]),t._v("\n$ decrby views "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 自减10")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#########################################################################")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 字符串范围 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 截取字符串 substring")]),t._v("\n$ flushdb "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清空数据库")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" k1 helloworld\n$ get k1\n$ getrange k1 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 截取前0-5的字符串 substr")]),t._v("\n$ getrange k1 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取到末尾")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 替换字符串 replace")]),t._v("\n$ setrange k1 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" xx "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从1开始替换两个字符 hxxloworld")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##########################################################")]),t._v("\n$ setex key seconds value "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set expire 设置过期时间")]),t._v("\n$ setnx key1 value1 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果key不存在，设置值")]),t._v("\n\n$ mset k1 v1 k2 v2 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一次性设置过个值")]),t._v("\n$ mget k1 k2 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看多个值")]),t._v("\n\n$ msetnx k1 v1 k3 v3 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 原子性操作，如果k1存在，k3不存在，也不能成功，只有所有的key都不存在时才成功")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 示例： $ mset user:1:name "zhangsan" user:1:age 22 ')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#############################################")]),t._v("\n$ getset k1 v1 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获得旧值设置新值  如果不存在则返回null  可以做一些更新的操作")]),t._v("\n\n")])])]),s("p",[s("strong",[t._v("2.list（列表）")])]),t._v(" "),s("p",[t._v("应用场景：栈、")]),t._v(" "),s("p",[s("strong",[t._v("hash（哈希）")])]),t._v(" "),s("p",[t._v("key-map")]),t._v(" "),s("p",[t._v("Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。")]),t._v(" "),s("p",[t._v("示例")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("HMSET runoobkey name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"redis tutorial"')]),t._v(" description "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"redis basic commands for caching"')]),t._v(" likes "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" visitors "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23000")]),t._v("\n\nhgetall runoobkey\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"redis tutorial"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"description"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"redis basic commands for caching"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"likes"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"visitors"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"23000"')]),t._v("\n")])])]),s("p",[s("strong",[t._v("Zset(有序集合)")])]),t._v(" "),s("p",[t._v("在set基础上，增加一个值，用于排序")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("zset k1  score1  v1\n\nzset name "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" zhangsan "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" lisi "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加多个值")]),t._v("\n\nzrange name "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取所有值")]),t._v("\n\nzrangebyscore salary -inf +inf   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 负无穷到正无穷薪水排序 ")]),t._v("\n")])])]),s("p",[t._v("排行榜应用可以使用zset实现、取top10，排名等")]),t._v(" "),s("h3",{attrs:{id:"三种特殊数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三种特殊数据类型"}},[t._v("#")]),t._v(" 三种特殊数据类型")]),t._v(" "),s("p",[s("strong",[t._v("geospatial地理位置")])]),t._v(" "),s("p",[t._v("人员的定位、附近的人、打车距离计算")]),t._v(" "),s("p",[t._v("redis的geo在3.2版本就有了，这个功能可以推算地理位置的信息，两地之间的距离，方圆几里的人")]),t._v(" "),s("p",[t._v("命令：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("GEOADD "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加地理位置  可以下载城市数据使用java一次性导入")]),t._v("\ngeoadd china:city "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("116.405285")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("39.904989")]),t._v(" beijing  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加北京地理位置")]),t._v("\ngeoadd china:city "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("121.472644")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("31.231706")]),t._v(" shanghai "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("113.280637")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23.125178")]),t._v(" guangzhou "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加上海广州")]),t._v("\n\nGEODIST "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 计算距离")]),t._v("\ngetdist china:city beijing shanghai "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 计算北京上海距离")]),t._v("\n\nGEOHASH\nGEOPOS\nGEORADIUS\nGEORADIUSBYMEMBER\n")])])]),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("p",[t._v("redis乐观锁 watch")]),t._v(" "),s("h3",{attrs:{id:"jedis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jedis"}},[t._v("#")]),t._v(" Jedis")]),t._v(" "),s("p",[s("strong",[t._v("什么是Jedis？")])]),t._v(" "),s("p",[t._v("是redis官方推荐的连接redis的开发工具。java驱动redis的工具包。")]),t._v(" "),s("h3",{attrs:{id:"redis的持久化（-）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis的持久化（-）"}},[t._v("#")]),t._v(" redis的持久化（**）")]),t._v(" "),s("p",[s("strong",[t._v("为什么需要持久化？")])]),t._v(" "),s("p",[t._v("redis作为基于内存的数据库，每次重启都会导致数据消失，除非你的数据只需要在服务器运行时存在，否则就必须持久化。")]),t._v(" "),s("p",[s("strong",[t._v("redis两种持久化方案")])]),t._v(" "),s("ul",[s("li",[t._v("RDB（Redis DataBase）"),s("strong",[t._v("快照")]),t._v("在指定时间间隔对数据进行快照保存。"),s("strong",[t._v("（RDB是redis默认持久化配置）")])]),t._v(" "),s("li",[t._v("AOF（Append Only File）记录所有写操作，当服务重启时重新执行这些命令来恢复原始数据。")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("可以同时开启两种持久化方式，这时在服务重启时会优先载入AOF文件来恢复原始数据，因为AOF文件保存的数据集要比RDB文件数据要完整。RDB在redis意外停止工作时丢失部分数据。")]),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("RDB持久化（快照持久化）")])]),t._v(" "),s("ul",[s("li",[t._v("配置文件配置")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("################################ SNAPSHOTTING  ################################")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   save <seconds> <changes>")]),t._v("\n\nsave "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("900")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 900秒 修改1次触发")]),t._v("\nsave "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 300秒 修改10")]),t._v("\nsave "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 60秒 修改10000")]),t._v("\n")])])]),s("ul",[s("li",[t._v("还可以手动调用：save 或 bgsave快照保存。")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("save \nbgsave  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 两个命令都可以")]),t._v("\n")])])]),s("p",[s("strong",[t._v("rdb工作方式")]),t._v("（redis保存dump.rdb文件时，服务器的操作：）")]),t._v(" "),s("ul",[s("li",[t._v("redis调用forks一个子进程")]),t._v(" "),s("li",[t._v("子进程将数据集写入一个临时rdb文件中")]),t._v(" "),s("li",[t._v("当子进程完成对新rdb文件的写入时，redis用新的rdb文件替换原来的rdb文件，并删除旧的rdb文件。")])]),t._v(" "),s("p",[s("strong",[t._v("RDB的优点")])]),t._v(" "),s("ul",[s("li",[t._v("1.设置rdb保存机制，保存数据，意外情况下根据需求恢复到不同版本的数据集。")]),t._v(" "),s("li",[t._v("2.RDB文件紧凑，适合传输到远端数据中心，适用于灾难恢复。")]),t._v(" "),s("li",[t._v("3.rdb在保存文件时会fork出一个子进程来持久化，父进程不需要参与io操作，最大化redis的性能。")]),t._v(" "),s("li",[t._v("4.和AOF相比，在恢复大的数据集的时候，RDB方式会更快一些")])]),t._v(" "),s("p",[s("strong",[t._v("RDB的缺点")])]),t._v(" "),s("ul",[s("li",[t._v("1.redis意外宕机会丢失部分数据。")]),t._v(" "),s("li",[t._v("2.RDB在保存文件时，要经常fork子进程，在数据集较大的时候fork过程会非常耗时，从而影响一定性能。fork子进程占用一定内存空间。")])]),t._v(" "),s("p",[s("strong",[t._v("RDB触发")])]),t._v(" "),s("p",[t._v("rdb触发时会产生一个dump.rdb文件")]),t._v(" "),s("ul",[s("li",[t._v("1.在满足配置条件的时触发（如 save 60 5 一分钟修改5次）")]),t._v(" "),s("li",[t._v("2.执行flushall命令时，也会触发rdb规则")]),t._v(" "),s("li",[t._v("3.退出redis时（关机），也会触发产生rdb文件")])]),t._v(" "),s("p",[s("strong",[t._v("如何恢复rdb文件")])]),t._v(" "),s("ul",[s("li",[t._v("1.只需将rdb文件，放在redis的启动目录下，redis启动时会自动检查dump.rdb文件并恢复其中的数据。")]),t._v(" "),s("li",[t._v("2.查看需要存放的目录  config get dir")])]),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("AOF持久化（append only file）")])]),t._v(" "),s("p",[t._v("aof默认是不开启的，可以手动配置。只需要配置：appendonly  yes")]),t._v(" "),s("p",[s("strong",[t._v("如果aof文件有错误")]),t._v("，这时redis是启动不起来的，这时需要修复aof文件，redis提供了一个工具redis-check-aop执行：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("redis-check-aof --fix\n")])])]),s("p",[s("strong",[t._v("优点和缺点")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("appendonly no "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 默认关闭")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# The name of the append only file (default: "appendonly.aof")')]),t._v("\nappendfilename "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"appendonly.aof"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# aof文件名称")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# appendfsync always # 每次都同步aof,非常慢，但非常安全")]),t._v("\nappendfsync everysec "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每秒同步一次，足够快和rdb差不多，可能会丢失1秒数据，默认配置（兼顾速度和安全）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# appendfsync no # 不开启，从不同步，效率最高，交给操作系统处理")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rewrite 重写规则设置，如果aof文件超过设置值时，会再fork一个进程，重写一个新文件")]),t._v("\n")])])]),s("p",[s("strong",[t._v("优点")])]),t._v(" "),s("ul",[s("li",[t._v("1.每一次修改都同步appendfsync always")]),t._v(" "),s("li",[t._v("2.每一秒同步一次，最多会丢失1秒数据")]),t._v(" "),s("li",[t._v("3.从不同步设置效率最高")]),t._v(" "),s("li",[t._v("4.日志重写，aof文件过大时会触发重写，重写后新的aof文件包含了恢复当前数据集所需的最小命令集合。（而且绝对安全，重写新的aof文件时，会继续将命令追加到现有文件中，并且新建完成后自动切换到新文件追加命令）")]),t._v(" "),s("li",[t._v("5.aof文件容易被人读懂，可以对文件分析，如果不小心执行错误命令，只要aof文件没被重写，只要停止服务器，将错误命令移除，重启redis即可恢复到错误命令之前的状态。")])]),t._v(" "),s("p",[s("strong",[t._v("日志重写")]),t._v("除了默认配置外也可以手动调用命令：bgrewriteaof来触发日志重写")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("bgrewriteaof\n")])])]),s("p",[s("strong",[t._v("缺点")])]),t._v(" "),s("ul",[s("li",[t._v("1.相同的数据集aof文件要远远大于rdb文件，恢复数据时速度会比rdb慢")]),t._v(" "),s("li",[t._v("2.aof运行效率也低于rdb（aof属于IO操作），所以默认开启rdb")])]),t._v(" "),s("p",[s("strong",[t._v("AOF重写工作原理")])]),t._v(" "),s("p",[t._v("aof和rdb快照都利用了写时复制机制")]),t._v(" "),s("ul",[s("li",[t._v("redis会fork一个子进程")]),t._v(" "),s("li",[t._v("子进程开始将新的aof文件内容写入到临时文件")]),t._v(" "),s("li",[t._v("重写时，同时父进程一边将写入命令累积到一个内存缓存中，一边将这些命令追加到现有的aof文件末尾（这就解释了aof为什么是安全的）")]),t._v(" "),s("li",[t._v("当子进程完成重写工作，给父进程发一个信号，父进程会将缓存中的数据追加到新aof文件末尾（从而完成新旧文件替换）")])]),t._v(" "),s("p",[s("strong",[t._v("扩展")])]),t._v(" "),s("p",[s("strong",[t._v("如何选择使用哪种持久化配置？")])]),t._v(" "),s("p",[t._v("官方推荐使用默认rdb配置，如果对数据安全性要求高建议两种配置都开启，不推荐单独使用aof持久化。因为rdb定时快照便于数据库备份，且rdb的恢复数据比aof要快。")]),t._v(" "),s("p",[s("strong",[t._v("怎样从RDB方式切换到AOF方式？")])]),t._v(" "),s("p",[t._v('【不重启切换1.备份dump.rdb 2.开启aof：redis-cli  config  set appendonly  yes  3.关闭rdb：redis-cli config set save "" (可选)】')]),t._v(" "),s("p",[t._v("在 Redis 2.2 或以上版本，可以在不重启的情况下，从 RDB 切换到 AOF ：")]),t._v(" "),s("ul",[s("li",[t._v("为最新的 dump.rdb 文件创建一个备份。")]),t._v(" "),s("li",[t._v("将备份放到一个安全的地方。")]),t._v(" "),s("li",[t._v("执行以下两条命令:")]),t._v(" "),s("li",[t._v("redis-cli config set appendonly yes")]),t._v(" "),s("li",[t._v("redis-cli config set save “”")]),t._v(" "),s("li",[t._v("确保写命令会被正确地追加到 AOF 文件的末尾。")]),t._v(" "),s("li",[t._v("执行的第一条命令开启了 AOF 功能： Redis 会阻塞直到初始 AOF 文件创建完成为止， 之后 Redis 会继续处理命令请求， 并开始将写入命令追加到 AOF 文件末尾。")])]),t._v(" "),s("p",[t._v("执行的第二条命令用于关闭 RDB 功能。 这一步是可选的， 如果你愿意的话， 也可以同时使用 RDB 和 AOF 这两种持久化功能。")]),t._v(" "),s("p",[t._v("重要:别忘了在 redis.conf 中打开 AOF 功能！ 否则的话， 服务器重启之后， 之前通过 CONFIG SET 设置的配置就会被遗忘， 程序会按原来的配置来启动服务器。")]),t._v(" "),s("p",[s("strong",[t._v("AOF和RDB之间的相互作用")])]),t._v(" "),s("p",[t._v("版本号大于2.4的redis，快照（bgsave）和日志重写（bgrewriteaof）不能同时执行。原因这两个操作都会对磁盘进行大量IO操作。总之就是为了一个字-快")]),t._v(" "),s("p",[s("strong",[t._v("备份redis数据")])]),t._v(" "),s("p",[t._v("任何时候，复制rdb文件都是绝对安全的。")]),t._v(" "),s("ul",[s("li",[t._v("创建一个定期任务（cron job）， 每小时将一个 RDB 文件备份到一个文件夹， 并且每天将一个 RDB 文件备份到另一个文件夹。")]),t._v(" "),s("li",[t._v("确保快照的备份都带有相应的日期和时间信息， 每次执行定期任务脚本时， 使用 find 命令来删除过期的快照： 比如说， 你可以保留最近 48 小时内的每小时快照， 还可以保留最近一两个月的每日快照。")]),t._v(" "),s("li",[t._v("至少每天一次， 将 RDB 备份到你的数据中心之外， 或者至少是备份到你运行 Redis 服务器的物理机器之外。")])]),t._v(" "),s("p",[s("strong",[t._v("容灾备份")])]),t._v(" "),s("p",[t._v("Redis 的容灾备份基本上就是对数据进行备份， 并将这些备份传送到多个不同的外部数据中心。容灾备份可以在 Redis 运行并产生快照的主数据中心发生严重的问题时， 仍然让数据处于安全状态。")]),t._v(" "),s("p",[t._v("因为很多 Redis 用户都是创业者， 他们没有大把大把的钱可以浪费， 所以下面介绍的都是一些实用又便宜的容灾备份方法：")]),t._v(" "),s("ul",[s("li",[t._v("Amazon S3 ，以及其他类似 S3 的服务，是一个构建灾难备份系统的好地方。 最简单的方法就是将你的每小时或者每日 RDB 备份加密并传送到 S3 。 对数据的加密可以通过 gpg -c 命令来完成（对称加密模式）。 记得把你的密码放到几个不同的、安全的地方去（比如你可以把密码复制给你组织里最重要的人物）。 同时使用多个储存服务来保存数据文件，可以提升数据的安全性。")]),t._v(" "),s("li",[t._v("传送快照可以使用 SCP 来完成（SSH 的组件）。 以下是简单并且安全的传送方法： 买一个离你的数据中心非常远的 VPS ， 装上 SSH ， 创建一个无口令的 SSH 客户端 key ， 并将这个 key 添加到 VPS 的 authorized_keys 文件中， 这样就可以向这个 VPS 传送快照备份文件了。 为了达到最好的数据安全性，至少要从两个不同的提供商那里各购买一个 VPS 来进行数据容灾备份。")]),t._v(" "),s("li",[t._v("需要注意的是， 这类容灾系统如果没有小心地进行处理的话， 是很容易失效的。最低限度下， 你应该在文件传送完毕之后， 检查所传送备份文件的体积和原始快照文件的体积是否相同。 如果你使用的是 VPS ， 那么还可以通过比对文件的 SHA1 校验和来确认文件是否传送完整。")])]),t._v(" "),s("p",[t._v("另外， 你还需要一个独立的警报系统， 让它在负责传送备份文件的传送器（transfer）失灵时通知你。")]),t._v(" "),s("ul",[s("li",[t._v("只做缓存的话，不需要持久化")]),t._v(" "),s("li",[t._v("5.性能建议\n"),s("ul",[s("li",[t._v("rdb文件只做备份，建议在slave机器上持久化rdb文件，没15分钟备份一次，值保留save 900 1设置")]),t._v(" "),s("li",[t._v("如果开启aof，日志重写过程中产生的新数据在追加到新aof文件时，几乎不可避免会造成阻塞。64m的默认设置太小，建议只要磁盘允许设置到5G以上，默认超过原始大小100%重写可改到适当的数据。")]),t._v(" "),s("li",[t._v("如果不开启aof，依靠主从复制也可以实现高可用性，节省大笔io，减少rewrite过程造成的系统波动。代价是主从机同时宕机，会损失十几分钟的数据，启动时要比较主从机rdb文件，载入比较新的那个。（断电）异地多活，主从复制保证安全。")])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"redis发布订阅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis发布订阅"}},[t._v("#")]),t._v(" Redis发布订阅")]),t._v(" "),s("p",[t._v("缓存穿透（mysql查不到）-布隆过滤器")]),t._v(" "),s("p",[t._v("缓存击穿（mysql有数据，热点数据，缓存过期）-加锁")]),t._v(" "),s("p",[t._v("缓存雪崩（缓存服务器宕机）")])])}),[],!1,null,null,null);e.default=n.exports}}]);