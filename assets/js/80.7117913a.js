(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{426:function(a,t,e){"use strict";e.r(t);var n=e(42),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"_1-spring是为解决什么问题产生的？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-spring是为解决什么问题产生的？"}},[a._v("#")]),a._v(" 1.spring是为解决什么问题产生的？")]),a._v(" "),e("p",[a._v("spring是为解决企业级应用开发的复杂性而创建的。")]),a._v(" "),e("h2",{attrs:{id:"_2-spring主要包括哪些方面？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring主要包括哪些方面？"}},[a._v("#")]),a._v(" 2.spring主要包括哪些方面？")]),a._v(" "),e("ul",[e("li",[a._v("IOC/DI")]),a._v(" "),e("li",[a._v("aop")]),a._v(" "),e("li",[a._v("事务")]),a._v(" "),e("li",[a._v("jdbcTemplate")])]),a._v(" "),e("h2",{attrs:{id:"_3-spring有哪些组件（20个左右）？大致是什么功能？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-spring有哪些组件（20个左右）？大致是什么功能？"}},[a._v("#")]),a._v(" 3.spring有哪些组件（20个左右）？大致是什么功能？")]),a._v(" "),e("ul",[e("li",[a._v("spring-aop 提供aop实现（面向切面编程）")]),a._v(" "),e("li",[a._v("spring-aspect 提供aspectj框架的整合")]),a._v(" "),e("li",[a._v("spring-bean 提供控制反转基础实现")]),a._v(" "),e("li",[a._v("spring-context 是在IOC功能上继续扩展服务")]),a._v(" "),e("li",[a._v("spring-context-support 是对spring-context的扩展，提供对三方库的整合")]),a._v(" "),e("li",[a._v("spring-core spring核心组件")]),a._v(" "),e("li",[a._v("spring-instrument 类工具和类加载器实现")]),a._v(" "),e("li",[a._v("spring-expression 对表达式语言的支持")])]),a._v(" "),e("h2",{attrs:{id:"_4-什么是ioc？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是ioc？"}},[a._v("#")]),a._v(" 4.什么是IOC？")]),a._v(" "),e("p",[a._v("控制反转，一种思想，实际上是对一个对象控制权的反转。\n即一个对象的创建、初始化、销毁等操作，统统由开发者自己来完成。IOC就是将这些操作交由容器来管理。")]),a._v(" "),e("h2",{attrs:{id:"_5-applicationcontext接口有哪些实现？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-applicationcontext接口有哪些实现？"}},[a._v("#")]),a._v(" 5.applicationContext接口有哪些实现？")]),a._v(" "),e("ul",[e("li",[a._v("ClassPathXmlApplicationContext")]),a._v(" "),e("li",[a._v("FileSystemXMLApplicationContext")]),a._v(" "),e("li",[a._v("AnnotationConfigApplicationContext\n等")])]),a._v(" "),e("h2",{attrs:{id:"_6-bean有哪些获取方式？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-bean有哪些获取方式？"}},[a._v("#")]),a._v(" 6.bean有哪些获取方式？")]),a._v(" "),e("ul",[e("li",[a._v("ctx.getBean(name或id)")]),a._v(" "),e("li",[a._v("ctx.getBean(class) Class获取-多实例情况下回报找到多个bean的报错")])]),a._v(" "),e("h2",{attrs:{id:"_7-属性注入的方式？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-属性注入的方式？"}},[a._v("#")]),a._v(" 7.属性注入的方式？")]),a._v(" "),e("ul",[e("li",[a._v("1.构造注入-通过bean的构造方法注入属性"),e("constructor-arg",{attrs:{index:"",value:""}})],1),a._v(" "),e("li",[a._v("2.属性注入-"),e("constructor-arg",{attrs:{name:"",value:""}})],1),a._v(" "),e("li",[a._v("set注入-"),e("property",{attrs:{name:"",value:""}})],1),a._v(" "),e("li",[a._v("p名称空间注入 "),e("bean",{staticClass:"org.javaboy.Book",attrs:{id:"book4","p:id":"4","p:bookName":"西游记","p:price":"33"}})],1),a._v(" "),e("li",[a._v("外部bean注入\n静态工厂注入-针对外部bean")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('public class OkHttpUtils {\n   private static OkHttpClient OkHttpClient;\n   public static OkHttpClient getInstance() {\n       if (OkHttpClient == null) {\n           OkHttpClient = new OkHttpClient.Builder().build();\n       }\n       return OkHttpClient;\n   }\n}\n<bean class="org.javaboy.OkHttpUtils" factory-method="getInstance" id="okHttpClient"></bean>\n')])])]),e("p",[a._v("实例工厂注入-针对外部bean的注入")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('public class OkHttpUtils {\n   private OkHttpClient OkHttpClient;\n   public OkHttpClient getInstance() {\n       if (OkHttpClient == null) {\n           OkHttpClient = new OkHttpClient.Builder().build();\n       }\n       return OkHttpClient;\n   }\n}\n<bean class="org.javaboy.OkHttpUtils" id="okHttpUtils"/>\n<bean class="okhttp3.OkHttpClient" factory-bean="okHttpUtils" factory-method="getInstance" id="okHttpClient"></bean>\n')])])]),e("h2",{attrs:{id:"_8-复杂属性注入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-复杂属性注入"}},[a._v("#")]),a._v(" 8.复杂属性注入")]),a._v(" "),e("ul",[e("li",[a._v("对象注入")]),a._v(" "),e("li",[a._v("数组注入 array或list")]),a._v(" "),e("li",[a._v("map注入")]),a._v(" "),e("li",[a._v("Properties注入-k-v对的注入")])]),a._v(" "),e("h2",{attrs:{id:"_9-bean注入到容器的3种方式？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-bean注入到容器的3种方式？"}},[a._v("#")]),a._v(" 9.bean注入到容器的3种方式？")]),a._v(" "),e("ul",[e("li",[a._v("xml注入")]),a._v(" "),e("li",[a._v("java配置注入")]),a._v(" "),e("li",[a._v("自动化扫描")])]),a._v(" "),e("h2",{attrs:{id:"_10-java配置bean如何实现？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-java配置bean如何实现？"}},[a._v("#")]),a._v(" 10.java配置bean如何实现？")]),a._v(" "),e("p",[a._v('@Configuration + @Bean("xxx")')]),a._v(" "),e("h2",{attrs:{id:"_11-自动化配置如何实现？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-自动化配置如何实现？"}},[a._v("#")]),a._v(" 11.自动化配置如何实现？")]),a._v(" "),e("ul",[e("li",[a._v("组件注解+自动化扫描")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('// 组件注解\n@Component\n@Repository\n@Service\n@Controller\n// 配置包自动扫描   \n@Configuration\n@ComponentScan(basePackages = "org.javaboy.javaconfig.service")\npublic class JavaConfig {\n}\n// 根据注解扫描-排除了Controller注解的类\n@Configuration\n@ComponentScan(basePackages = "org.javaboy.javaconfig",useDefaultFilters = true,excludeFilters = {@ComponentScan.Filter(type = FilterType.ANNOTATION,classes = Controller.class)})\npublic class JavaConfig {\n}\n')])])]),e("ul",[e("li",[a._v("xml配置自动化扫描")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<context:component-scan base-package="org.javaboy.javaconfig" use-default-filters="true">\n   <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>\n</context:component-scan>\n')])])]),e("ul",[e("li",[a._v("对象注入 @Autowired\n@Resources\n@Injected")])]),a._v(" "),e("p",[a._v("@Autowired 是根据类型去查找，然后赋值，这就有一个要求，这个类型只可以有一个对象，否则就会报错。@Resources 是根据名称去查找，默认情况下，定义的变量名，就是查找的名称，当然开发者也可以在 @Resources 注解中手动指定。所以，如果一个类存在多个实例，那么就应该使用 @Resources 去注入，如果非常使用 @Autowired，也是可以的，此时需要配合另外一个注解，@Qualifier，在 @Qualifier 中可以指定变量名，两个一起用（@Qualifier 和 @Autowired）就可以实现通过变量名查找到变量。")]),a._v(" "),e("h2",{attrs:{id:"_12-条件注解-conditional如何定义条件及使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-条件注解-conditional如何定义条件及使用"}},[a._v("#")]),a._v(" 12.条件注解@Conditional如何定义条件及使用")]),a._v(" "),e("ul",[e("li",[a._v("实现Condition接口，实现matches方法。")]),a._v(" "),e("li",[a._v("配合@Conditional(xxx.class)")])]),a._v(" "),e("h2",{attrs:{id:"_13-使用条件注解实现多环境切换？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-使用条件注解实现多环境切换？"}},[a._v("#")]),a._v(" 13.使用条件注解实现多环境切换？")]),a._v(" "),e("ul",[e("li",[a._v("使用@Profile")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('public class JavaMain {\n   public static void main(String[] args) {\n       AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n       ctx.getEnvironment().setActiveProfiles("dev");\n       ctx.register(JavaConfig.class);\n       ctx.refresh();\n       DataSource ds = (DataSource) ctx.getBean("ds");\n       System.out.println(ds);\n   }\n}\n')])])]),e("h2",{attrs:{id:"_14-bean的作用域？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-bean的作用域？"}},[a._v("#")]),a._v(" 14.bean的作用域？")]),a._v(" "),e("p",[a._v("spring容器默认单例模式，可以通过xml设置scope属性或java配置通过@Scope来设置。\nscope有四种取值：\nsingleton（默认）、prototype、request、session 后两个值在web环境下有效。")]),a._v(" "),e("h2",{attrs:{id:"_15-bean-xml配置中id和name的区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-bean-xml配置中id和name的区别？"}},[a._v("#")]),a._v(" 15.bean xml配置中id和name的区别？")]),a._v(" "),e("p",[a._v("指定bean的唯一标识，区别是name可以指定多个用逗号隔开")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<bean class="org.javaboy.User" name="user,user1,user2,user3" scope="prototype"/>\n')])])]),e("h2",{attrs:{id:"_16-java和xml混合配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-java和xml混合配置"}},[a._v("#")]),a._v(" 16.java和xml混合配置")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('@Configuration\n@ImportResource("classpath:applicationContext.xml")\npublic class JavaConfig {\n}\n')])])]),e("h2",{attrs:{id:"_17-aware接口的作用？有哪些特点？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-aware接口的作用？有哪些特点？"}},[a._v("#")]),a._v(" 17.Aware接口的作用？有哪些特点？")]),a._v(" "),e("p",[a._v("感知接口，能够获取感知接口提供的服务和能力。Aware接口是个空接口，有许多实现类，他们的共同特征：1.都以Aware结尾 2.都继承Aware接口 3.都定义了一个set方法。该set方法参数提供感知内容。")]),a._v(" "),e("h2",{attrs:{id:"_18-aware接口有哪些？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-aware接口有哪些？"}},[a._v("#")]),a._v(" 18.Aware接口有哪些？")]),a._v(" "),e("ul",[e("li",[a._v("ApplicationContextAware 获取ApplicationContext容器的能力。")]),a._v(" "),e("li",[a._v("BeanClassLoaderAware")]),a._v(" "),e("li",[a._v("BeanFactoryAware")]),a._v(" "),e("li",[a._v("BeanNameAware")]),a._v(" "),e("li",[a._v("EnvirenmentAware")])]),a._v(" "),e("h2",{attrs:{id:"_19-什么是aop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19-什么是aop"}},[a._v("#")]),a._v(" 19.什么是aop?")]),a._v(" "),e("p",[a._v("aop即面向切面编程，是oop思想的一种补充。aop可以在不改变原代码的情况下，动态增强方法的功能。\naop包括几个常见概念：切点、通知、切面、连接点")]),a._v(" "),e("h2",{attrs:{id:"_20-aop的实现？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20-aop的实现？"}},[a._v("#")]),a._v(" 20.aop的实现？")]),a._v(" "),e("p",[a._v("java中aop的实现主要基于动态代理，有两种具体实现即cglib、jdk")]),a._v(" "),e("h2",{attrs:{id:"_21-jdk动态代理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_21-jdk动态代理？"}},[a._v("#")]),a._v(" 21.jdk动态代理？")]),a._v(" "),e("ul",[e("li",[a._v("实现InvocationHandler")]),a._v(" "),e("li",[a._v("实现invoke方法")]),a._v(" "),e("li",[a._v("Proxy.newProxyInstancec创建代理对象")])]),a._v(" "),e("h2",{attrs:{id:"_22-spring中aop的通知类型有几种？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_22-spring中aop的通知类型有几种？"}},[a._v("#")]),a._v(" 22.spring中aop的通知类型有几种？")]),a._v(" "),e("p",[a._v("5种类型的通知")]),a._v(" "),e("ul",[e("li",[a._v("前置")]),a._v(" "),e("li",[a._v("后置")]),a._v(" "),e("li",[a._v("异常")]),a._v(" "),e("li",[a._v("返回")]),a._v(" "),e("li",[a._v("环绕")])]),a._v(" "),e("h2",{attrs:{id:"_23-xml配置aop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_23-xml配置aop"}},[a._v("#")]),a._v(" 23.xml配置aop")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<bean class="org.javaboy.aop.LogAspect" id="logAspect"/>\n<aop:config>\n    <aop:pointcut id="pc1" expression="execution(* org.javaboy.aop.commons.*.*(..))"/>\n    <aop:aspect ref="logAspect">\n        <aop:before method="before" pointcut-ref="pc1"/>\n        <aop:after method="after" pointcut-ref="pc1"/>\n        <aop:after-returning method="returing" pointcut-ref="pc1" returning="r"/>\n        <aop:after-throwing method="afterThrowing" pointcut-ref="pc1" throwing="e"/>\n        <aop:around method="around" pointcut-ref="pc1"/>\n    </aop:aspect>\n</aop:config>\n')])])]),e("h2",{attrs:{id:"_24-jdbctemplate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_24-jdbctemplate"}},[a._v("#")]),a._v(" 24.jdbcTemplate")]),a._v(" "),e("p",[a._v("aop思想封装的jdbc操作工具。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('@Configuration\npublic class JdbcConfig(){\n    \n    @Bean\n    DataSource dataSource(){\n        DriverManagerDataSource dataSource = new DriverManagerDataSource();\n        dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");\n        dataSource.setUsername("root");\n        dataSource.setPassword("123456")\n        dataSource.setUrl("jdbc:mysql://localhost:3306/test01");\n        \n        return dataSource;\n    }\n    \n    @Bean\n    JdbcTemplate jdbcTemplate(){\n        return new JdbcTemplate(dataSource());\n    }\n    \n}\n')])])]),e("p",[a._v("xml配置")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">\n    <property name="username" value="root"/>\n    <property name="password" value="123"/>\n    <property name="url" value="jdbc:mysql:///test01?serverTimezone=Asia/Shanghai"/>\n    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>\n</bean>\n<bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">\n    <property name="dataSource" ref="dataSource"/>\n</bean>\n')])])]),e("h2",{attrs:{id:"_25-事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_25-事务"}},[a._v("#")]),a._v(" 25.事务")])])}),[],!1,null,null,null);t.default=r.exports}}]);