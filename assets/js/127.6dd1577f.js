(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{471:function(t,e,r){"use strict";r.r(e);var s=r(42),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"springsecurity前后端分离json格式登录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springsecurity前后端分离json格式登录"}},[t._v("#")]),t._v(" SpringSecurity前后端分离json格式登录")]),t._v(" "),r("h3",{attrs:{id:"服务端接口调整"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务端接口调整"}},[t._v("#")]),t._v(" 服务端接口调整")]),t._v(" "),r("p",[t._v("登录时用户名密码使用UsernamePasswordAuthorizationFilter处理。")]),t._v(" "),r("div",{staticClass:"language-xml extra-class"},[r("pre",{pre:!0,attrs:{class:"language-xml"}},[r("code",[t._v("public Authentication attemptAuthentication(HttpServletRequest request,\n\t\tHttpServletResponse response) throws AuthenticationException {\n\tString username = obtainUsername(request);\n\tString password = obtainPassword(request);\n    //省略\n}\nprotected String obtainPassword(HttpServletRequest request) {\n\treturn request.getParameter(passwordParameter);\n}\nprotected String obtainUsername(HttpServletRequest request) {\n\treturn request.getParameter(usernameParameter);\n}\n")])])]),r("p",[t._v("spring security 传递参数使用key/value形式。request.getParameter得出。")]),t._v(" "),r("p",[t._v("那么如果要使用json数据格式传递参数，就需要自定义一个filter取代UsernamePasswordAuthorizationFilter，获取参数时，换成从json获取。")]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"自定义过滤器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自定义过滤器"}},[t._v("#")]),t._v(" 自定义过滤器")]),t._v(" "),r("div",{staticClass:"language-xml extra-class"},[r("pre",{pre:!0,attrs:{class:"language-xml"}},[r("code",[t._v("\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);